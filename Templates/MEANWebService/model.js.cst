<%-- 
Name:   model.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>


<%@ Map Name="FieldNameOverrides" Src="Maps\FieldNameOverrides.csmap" %>
<%@ Map Name="MongooseSchema" Src="Maps\MongooseSchema.csmap" %>
<%@ Map Name="MongooseSchemaFK" Src="Maps\MongooseSchemaFK.csmap" %>
<%@ Map Name="MongooseSchemaPK" Src="Maps\MongooseSchemaPK.csmap" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->
var mongoose = require('mongoose'),
    uuid = require('node-uuid');

var <%= CurrentTable.Name.ToCamelCase() %>Schema = new mongoose.Schema({
<%  
    foreach(var column in CurrentTable.Columns)
    {
        var eol = column == CurrentTable.Columns.Last() ? string.Empty : ",";
        
        if (column.IsPrimaryKeyMember)
        {
            if (column.IsIdentityColumn())
            {
%>
    _id: { type: mongoose.Schema.ObjectId }<%= eol %>   // Source column: <%= column.Name %>
<%
            }
            else
            {
%>
    _id: <%= MongooseSchemaPK[column.NativeType] %><%= eol %>   // Source column: <%= column.Name %>
<%
            }
        }
        else if (column.IsForeignKeyMember)
        {
%>
    <%= FieldNameOverrides[column.Name.ToCamelCase()] %>: { <%= MongooseSchemaFK[column.NativeType] %>, required: <%= (!column.AllowDBNull).ToString().ToLower() %>, rel: '<%= column.GetPrimaryTable().Name.ToPascalCase() %>' }<%= eol %>   // Source column: <%= column.Name %>
<%
        }
        else
        {
%>
    <%= FieldNameOverrides[column.Name.ToCamelCase()] %>: { <%= MongooseSchema[column.NativeType] %>, required: <%= (!column.AllowDBNull).ToString().ToLower() %> }<%= eol %>   // Source column: <%= column.Name %>
<%
        }
    }
%>
});
<%
    foreach (var index in CurrentTable.Indexes.Where(x => !x.IsPrimaryKey))
    {
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.index({
<%
        foreach (var indexColumn in index.MemberColumns)
        {    
            var eol = indexColumn == index.MemberColumns.Last() ? string.Empty : ",";
%>
    <%= FieldNameOverrides[indexColumn.Name.ToCamelCase()] %>: 1<%= eol %>   // Source column: <%= indexColumn.Name %>
<%
        }    
%>
}, { unique: <%= index.IsUnique.ToString().ToLower() %> });
<%
    }
%>

var <%= CurrentTable.Name.ToCamelCase() %> = mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>', <%= CurrentTable.Name.ToCamelCase() %>Schema);

module.exports = <%= CurrentTable.Name.ToCamelCase() %>;
