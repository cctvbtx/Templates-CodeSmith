<%-- 
Name:   route.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- 04. Options --%>
<%@ Property Name="DirectRoutes" Type="System.Boolean" Category="04. Options" Optional="True" %>
<%@ Property Name="DirectRoutesPrefix" Type="System.String" Category="04. Options" Optional="True" %>
<%@ Property Name="RepoRoutes" Type="System.Boolean" Category="04. Options" Optional="True" %>
<%@ Property Name="RepoRoutesPrefix" Type="System.String" Category="04. Options" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>


<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Map Name="DeleteFlagDefaultValue" Src="Maps\DeleteFlagDefaultValue.csmap" %>
<%@ Map Name="DeleteFlagDeletedValue" Src="Maps\DeleteFlagDeletedValue.csmap" %>
<%@ Map Name="FieldNameOverrides" Src="Maps\FieldNameOverrides.csmap" %>
<%@ Map Name="ValidatorMethod" Src="Maps\ValidatorMethod.csmap" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->
<%
    var operations = new List<string>();
    var operationName = string.Empty;

    var varMode = FilterMode.Select;                // Temp variable ... reused by include files
    var columns = default(ColumnSchemaCollection);  // Temp variable ... reused by include files

    var tabSpaceCount = 4;

    var upDirString = CurrentTable.HasDefaultOnwer()
        ? "../"
        : "../../";

    var folderName = CurrentTable.HasDefaultOnwer()
        ? string.Empty
        : CurrentTable.Owner.ToPascalCase() + "/";
%>
var <%= CurrentTable.Name.ToPascalCase() %> = require('<%= upDirString %>models/<%= folderName %><%= CurrentTable.Name.ToPascalCase() %>Model');
var <%= CurrentTable.Name.ToPascalCase() %>Repo = require('<%= upDirString %>repos/<%= folderName %><%= CurrentTable.Name.ToPascalCase() %>Repo');

var express = require('express'),
    moment = require('moment'),
    uuid = require('node-uuid'),
    validator = require('validator');

var config = {};

var auth = require('<%= upDirString %>utilities/authentication')(config),
    strings = require('<%= upDirString %>utilities/strings');

module.exports = function (app, config) {

    'use strict';

    config = config;

<%
    var idColumn = CurrentTable.HasSingleIdentifierColumn() 
        ? CurrentTable.GetSingularIdentifierColumn()
        : CurrentTable.HasSingularPrimaryKey() 
            ? CurrentTable.GetSingularKeyColumn()
            : null;

    var idColumnName = idColumn != null ? idColumn.Name : string.Empty;

    var delFlag = CurrentTable.HasDeleteFlag()
        ? CurrentTable.GetDeleteFlagColumn()
        : null;

    var delFlagName = delFlag != null ? delFlag.Name : string.Empty;

    if (DirectRoutes)
    {
%>
    // -------------------------
    // DIRECT API ROUTES - BEGIN
    // -------------------------

    // Get all
    app.get('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>', function(req, res){
        <%= CurrentTable.Name.ToPascalCase() %>.find({ <% if(CurrentTable.HasDeleteFlag()){ %><%= FieldNameOverrides[CurrentTable.GetDeleteFlagColumn().Name.ToCamelCase()] %>: <%= DeleteFlagDefaultValue[CurrentTable.GetDeleteFlagColumn().NativeType] %><% } %> }, function(err, items){
            if (err) { res.sendStatus(500); return; }
            if (!items || items.length < 1) { res.sendStatus(404); return; }

            res.send({ items: items });
        });
    });

<%
    if (idColumn == null)
    {
%>
    // Get one ... not possible.  Tables must have a single primary key OR single identifier column.
<%
    }
    else
    {
%>
    // Get one
    app.get('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/:<%= idColumnName.ToCamelCase() %>', function(req, res){

        if (!<%= ValidatorMethod[idColumn.NativeType] %>(req.params.<%= idColumnName.ToCamelCase() %>)){ res.sendStatus(400); return; }

        <%= CurrentTable.Name.ToPascalCase() %>.find({ <%= FieldNameOverrides[idColumnName.ToCamelCase()] %>: req.params.<%= idColumnName.ToCamelCase() %><% if(delFlag != null){ %>, <%= FieldNameOverrides[delFlagName.ToCamelCase()] %>: <%= DeleteFlagDefaultValue[delFlag.NativeType] %><% } %> }, function(err, item){
            if (err) { res.sendStatus(500); return; }
            if (!item || item.length < 1){ res.sendStatus(404); return; }

            res.send({ item: <%= CurrentTable.Name.ToPascalCase() %>Repo.toDto(item) });
        });
    });
<%
    }
%>
    
    // TODO: app.post <%= DirectRoutesPrefix%>
    // Create new
    // app.post('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>', function(req, res){
    
    // TODO: app.put <%= DirectRoutesPrefix%>
    // Update one
    // app.put('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/:id', function(req, res){
    
    // TODO: app.patch <%= DirectRoutesPrefix%>
    // Partially update one
    // app.patch('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/:id', function(req, res){
    
    // TODO: app.delete <%= DirectRoutesPrefix%>
    // Delete one
    // app.delete('/<%= DirectRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/:id', function(req, res){

    // -------------------------
    // DIRECT API ROUTES - END
    // -------------------------

<%
    } // if (DirectRoutes)
    
    if (RepoRoutes)
    {
%>
    // ------------------------------
    // DATA REPOSITORY ROUTES - BEGIN
    // ------------------------------
<%
        // ====================
        // GET BY INDEX - BEGIN
        // ====================

        foreach(var index in CurrentTable.Indexes)
        {
            varMode = FilterMode.Select;
            columns = index.Filter(varMode);

            if (columns.Count < 1){ continue; }
            
            operationName = "find" + (index.IsUnique ? "One" : string.Empty) + "By" + index.CreateUniqueName();
            operations.Add(operationName);
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/<%= operationName %>'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }

<%
        foreach (var column in columns)
        {
%>
        var <%= column.Name.ToCamelCase() %> = (req.body.<%= column.Name.ToCamelCase() %> || null);
<%
        }
%>        
        
<%
%>
        <%= CurrentTable.Name.ToPascalCase() %>Repo.<%= operationName %>(<%= index.ToParamsArray(true) %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.status(200).send({ item: <%= CurrentTable.Name.ToPascalCase() %>Repo.toDto(item) });
        });
    });
<%
        }
            
        // ====================
        // GET BY INDEX - END
        // ====================
            
        
        
        
        
        // ==============
        // CREATE - BEGIN
        // ==============
        
        operationName = "create";
        operations.Add(operationName);

        varMode = FilterMode.Create;
        columns = CurrentTable.Filter(varMode);
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/<%= operationName %>'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }

<%
        foreach (var column in columns)
        {
%>
        var <%= column.Name.ToCamelCase() %> = (req.body.<%= column.Name.ToCamelCase() %> || null);
<%
        }
%>        
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.<%= operationName %>(<%= columns.ToParamsArray(true) %>, function(err, item){
            if (err && err.code == 11000){ res.sendStatus(409); return; }
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }
            if (!item) { console.log(err); res.status(500).send({ message: '<%= CurrentTable.Name.ToPascalCase() %> created but not returned' }); return; }

            res.status(200).send({ id: item.<%= FieldNameOverrides[idColumn.Name] %> });
        });
    });
<%
        
        // ==============
        // CREATE - END
        // ==============
        
        
        
        
        
        
        
        
        
        

        // ============
        // INIT - BEGIN
        // ============

        if (!CurrentTable.Indexes.Any(x => x.IsUnique && !x.IsPrimaryKey))
        {
%>

    // Init cannot be generated.  Table does not have any unique indicies.
<%
        }
        else
        {
            operationName = "init";
            operations.Add(operationName);

            varMode = FilterMode.Create;
            columns = CurrentTable.Filter(varMode);
            
            var indices = CurrentTable.Indexes.Where(x => x.IsUnique && !x.IsPrimaryKey);
            var count = 0;
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/<%= operationName %>'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }

<%
        foreach (var column in columns)
        {
%>
        var <%= column.Name.ToCamelCase() %> = (req.body.<%= column.Name.ToCamelCase() %> || null);
<%
        }
%>        
        
<%
%>
        <%= CurrentTable.Name.ToPascalCase() %>Repo.<%= operationName %>(<%= columns.ToParamsArray(true) %>, function(err, item){
            if (err && err.code == 11000){ res.sendStatus(409); return; }
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }
            if (!item) { console.log(err); res.status(500).send({ message: '<%= CurrentTable.Name.ToPascalCase() %> created but not returned' }); return; }

            res.status(200).send({ <%= idColumn.Name.ToCamelCase() %>: item.<%= FieldNameOverrides[idColumn.Name] %> });
        });
    });
<%
        }

        // ============
        // INIT - END
        // ============
        
        
        
        
        
        
        // ==============
        // UPDATE - BEGIN
        // ==============

        operations.Add("update");

        varMode = FilterMode.Update;
        columns = CurrentTable.Filter(varMode);
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/<%= operationName %>'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }

<%
        foreach (var column in columns)
        {
%>
        var <%= column.Name.ToCamelCase() %> = (req.body.<%= column.Name.ToCamelCase() %> || null);
<%
        }
%>        
        
<%
%>
        <%= CurrentTable.Name.ToPascalCase() %>Repo.<%= operationName %>(<%= columns.ToParamsArray(true) %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });
<%
        
        // ==============
        // UPDATE - END
        // ==============
    
    
    
    
    
    
        // ======================
        // DELETE & PURGE - BEGIN
        // ======================
        
        if (!CurrentTable.HasDeleteFlag())
        {
%>

// Delete (non-destructive) not possible.  Table does not have a delete flag.
<%
        
        }
        else
        {
            operations.Add("delete");
            operations.Add("purgeOne");
            operations.Add("purgeAll");
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/delete'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.delete(req.body.<%= idColumn.Name.ToCamelCase() %><% if (CurrentTable.HasVersionUserColumn()){ %>, req.body.userId<% } %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/purgeOne'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.purgeOne(req.body.<%= idColumn.Name.ToCamelCase() %>, req.body.isConfirmed<% if (CurrentTable.HasVersionUserColumn()){ %>, req.body.userId<% } %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/purgeAll'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.purgeAll(req.body.<%= idColumn.Name.ToCamelCase() %>, req.body.isConfirmed<% if (CurrentTable.HasVersionUserColumn()){ %>, req.body.userId<% } %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });
<%
        }
        
        // ======================
        // DELETE & PURGE - END
        // ======================
        
        
        
        
        // ============
        // KILL - BEGIN
        // ============

        operations.Add("killOne");
        operations.Add("killAll");
    
%>

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/killOne'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.killOne(req.body.<%= idColumn.Name.ToCamelCase() %>, req.body.isConfirmed<% if (CurrentTable.HasVersionUserColumn()){ %>, req.body.userId<% } %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });

    app.post('/<%= RepoRoutesPrefix%>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/killAll'<% if (CurrentTable.HasVersionUserColumn()){ %>, auth.enforceAuthentication<% } %>, function(req, res){

        if (!req.body){ res.status(400).Send({ msg: 'Bad request format' }); return; }
        
        <%= CurrentTable.Name.ToPascalCase() %>Repo.killAll(req.body.<%= idColumn.Name.ToCamelCase() %>, req.body.isConfirmed<% if (CurrentTable.HasVersionUserColumn()){ %>, req.body.userId<% } %>, function(err, item){
            if (err && err.message) { console.log(err); res.status(500).send({ message: err.message }); return; }
            if (err) { console.log(err); res.status(500).send({ message: err }); return; }

            res.statusStatus(200);
        });
    });
<%    
        // ============
        // KILL - END
        // ============
%>        

    // ------------------------------
    // DATA REPOSITORY ROUTES - END
    // ------------------------------
<%
    }
%>
}
    