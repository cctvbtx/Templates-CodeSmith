<%-- 
Name:   proxy.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:   Methods for calling operations from external application.
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- 04. Options --%>
<%@ Property Name="DirectRoutes" Type="System.Boolean" Category="04. Options" Optional="True" %>
<%@ Property Name="DirectRoutesPrefix" Type="System.String" Category="04. Options" Optional="True" %>
<%@ Property Name="RepoRoutes" Type="System.Boolean" Category="04. Options" Optional="True" %>
<%@ Property Name="RepoRoutesPrefix" Type="System.String" Category="04. Options" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>


<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Map Name="DeleteFlagDefaultValue" Src="Maps\DeleteFlagDefaultValue.csmap" %>
<%@ Map Name="DeleteFlagDeletedValue" Src="Maps\DeleteFlagDeletedValue.csmap" %>
<%@ Map Name="FieldNameOverrides" Src="Maps\FieldNameOverrides.csmap" %>
<%@ Map Name="ValidatorMethod" Src="Maps\ValidatorMethod.csmap" %>
<%@ Map Name="IdentColumnDefaultValue" Src="Maps\IdentColumnDefaultValue.csmap" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->
<%
    var operations = new List<string>();
    var operationName = string.Empty;

    var varMode = FilterMode.Select;                // Temp variable ... reused by include files
    var columns = default(ColumnSchemaCollection);  // Temp variable ... reused by include files

    var tabSpaceCount = 4;

    var idColumn = CurrentTable.HasSingleIdentifierColumn() 
        ? CurrentTable.GetSingularIdentifierColumn()
        : CurrentTable.HasSingularPrimaryKey() 
            ? CurrentTable.GetSingularKeyColumn()
            : null;

    var idColumnName = idColumn != null ? idColumn.Name : string.Empty;

    var hasDelFlag = CurrentTable.HasDeleteFlag();

    var delFlag = hasDelFlag
        ? CurrentTable.GetDeleteFlagColumn()
        : null;

    var delFlagName = delFlag != null ? delFlag.Name : string.Empty;

    var upDirString = CurrentTable.HasDefaultOnwer()
        ? "../../"
        : "../../../";

    var folderName = CurrentTable.HasDefaultOnwer()
        ? string.Empty
        : CurrentTable.Owner.ToPascalCase() + "/";

    var indent = string.Empty;
%>

// NOTE:
// This file is meant to be used as an Externals file in a project OTHER than 
// the current.  It provides helper methods to communicate with THIS application.
// The expected path in a sister project is:
//
//     /server/proxies/<%= ProjectName %>/<%= folderName %><%= CurrentTable.Name.ToPascalCase() %>Proxy.js

var DIRECT_BASE_PATH = '<%= DirectRoutesPrefix %>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/';
var REPO_BASE_PATH = '<%= RepoRoutesPrefix %>/<%= CurrentTable.Name.ToHypehatedLowercase() %>/';

var email = require('email-addresses'),
    request = require('request-json'),
    strings = require('<%= upDirString %>utilities/strings',
    validator = require('validator');

module.exports = function (baseUri) {
<%
    // =================
    // COUNT ALL - BEGIN
    // =================

    operationName = "countAll";
    operations.Add(operationName);
%>

    var _<%= operationName %> = function(<% if(hasDelFlag){ %>includeDeleted, <% } %>callback){
        var vars = { <% if(hasDelFlag){ %>includeDeleted: includeDeleted <% } %>};

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + '<%= operationName %>', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };
<%
    // =================
    // COUNT ALL - END
    // =================
    
    
    
    
    
    // ====================
    // GET BY INDEX - BEGIN
    // ====================

    foreach(var index in CurrentTable.Indexes)
    {
        varMode = FilterMode.Select;
        columns = index.Filter(varMode);

        if (columns.Count < 1){ continue; }
        
        operationName = "find" + (index.IsUnique ? "One" : string.Empty) + "By" + index.CreateUniqueName();
        operations.Add(operationName);
        
        indent = string.Empty.PadLeft(tabSpaceCount * 2, ' ');
%>

    var _<%= operationName %> = function(<%= index.ToParamsArray(true) %>, callback){
        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->
<%
        if ( hasDelFlag ){ columns.Add(delFlag); }
%>
        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + '<%= operationName %>', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };
<%
    }
    
    // ====================
    // GET BY INDEX - END
    // ====================
    
    
    
    
    
    // ==============
    // CREATE - BEGIN
    // ==============
    
    operationName = "create";
    operations.Add(operationName);

    varMode = FilterMode.Create;
    columns = CurrentTable.Filter(varMode);
        
    indent = string.Empty.PadLeft(tabSpaceCount * 2, ' ');
%>

    var _<%= operationName %> = function (<%= CurrentTable.Filter(FilterMode.Create).ToParamsArray() %>, callback){
        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->

        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + '<%= operationName %>', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };
<%
    
    // ==============
    // CREATE - END
    // ==============
    
    
    
    
    
    
    
    
    
    

    // ============
    // INIT - BEGIN
    // ============

    if (!CurrentTable.Indexes.Any(x => x.IsUnique && !x.IsPrimaryKey))
    {
%>

// Init cannot be generated.  Table does not have any unique indicies.
<%
    }
    else
    {
        operationName = "init";
        operations.Add(operationName);
        
        indent = string.Empty.PadLeft(tabSpaceCount * 2, ' ');

        varMode = FilterMode.Create;
        columns = CurrentTable.Filter(varMode);
        
        var indices = CurrentTable.Indexes.Where(x => x.IsUnique && !x.IsPrimaryKey && x.MemberColumns[0].Column != CurrentTable.GetSingularIdentifierColumn());
        var count = 0;
%>

    var _<%= operationName %> = function (<%= CurrentTable.Filter(FilterMode.Create).ToParamsArray() %>, suppressError, callback){
        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->

        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->
        vars.suppressError = suppressError;

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + '<%= operationName %>', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };
<%
    }
    
    // ============
    // INIT - END
    // ============    
    
    
    
    
    
    
    // ==============
    // UPDATE - BEGIN
    // ==============

    operationName = "update";
    operations.Add(operationName);
    
    indent = string.Empty.PadLeft(tabSpaceCount * 2, ' ');

    varMode = FilterMode.Update;
    columns = CurrentTable.Filter(varMode);
    
    if (!idColumn.IsPrimaryKeyMember && CurrentTable.HasSingularPrimaryKey())
    {
        columns.Remove(CurrentTable.GetSingularKeyColumn());
    }
%>

    var _<%= operationName %> = function (<%= columns.ToParamsArray() %>, callback){
        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->

        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + '<%= operationName %>', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };
<%
    
    // ==============
    // UPDATE - END
    // ==============
    
    
    
    
    
    
    // ======================
    // DELETE & PURGE - BEGIN
    // ======================
    
    if (delFlag == null)
    {
%>

// Delete (non-destructive) not possible.  Table does not have a delete flag.
<%
    }
    else if (idColumn == null)
    {
%>

// Delete (non-destructive) not possible.  Table does not a singular/simple primary key or a singular identifier column.
<%
    }
    else
    {
        operations.Add("deleteOne");
        operations.Add("purgeOne");
        operations.Add("purgeAll");
        
        indent = string.Empty.PadLeft(tabSpaceCount * 2, ' ');

        var cols = new List<ColumnSchema>();
        cols.Add(idColumn);
        if (CurrentTable.HasVersionUserColumn()){ cols.Add(CurrentTable.GetVersionUserColumn()); }
        
        columns = cols.ToColumnSchemaCollection();
%>

    var _deleteOne = function (<%= columns.ToParamsArray() %>, callback){

        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->

        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->

        var client = request.newClient(_baseUri);
        client.post(REPO_BASE_PATH + 'deleteOne', data, function(err, res, body){
            if (err){ return callback(err.message); }
            if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

            return callback(null, body);
        });
    };

<%

        if (CurrentTable.HasVersionUserColumn()){ columns.Remove(CurrentTable.GetVersionUserColumn()); }
%>
    var _purgeOne = function (<%= idColumn.Name.ToCamelCase() %>, confirm, callback){

        <!-- #include file="Includes\Columns-ValidateJavacriptParams.cst" -->

        <!-- #include file="Includes\Columns-ToJsonRequestData.cst" -->

        if (confirm === true) {
            var client = request.newClient(_baseUri);
            client.post(REPO_BASE_PATH + 'purgeOne', data, function(err, res, body){
                if (err){ return callback(err.message); }
                if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

                return callback(null, body);
            });
        } else {
            callback('purgeOne operation not confirmed');
        }
    };

    var _purgeAll = function (confirm, callback){
        var data = { confirm: confirm };
        if (confirm === true) {
            var client = request.newClient(_baseUri);
            client.post(REPO_BASE_PATH + 'purgeAll', data, function(err, res, body){
                if (err){ return callback(err.message); }
                if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

                return callback(null, body);
            });
        } else {
            callback('purgeAll operation not confirmed');
        }
    };
<%
        
    }
    
    // ======================
    // DELETE & PURGE - END
    // ======================
    
    
    
    
    // ============
    // KILL - BEGIN
    // ============

    if (idColumn == null)
    {
%>

// Kill () not possible.  Table does not a singular/simple primary key or a singular identifier column.
<%
    }
    else
    {
        operations.Add("killOne");
        operations.Add("killAll");
    
%>

    var _killOne = function (<%= idColumn.Name.ToCamelCase() %>, confirm, callback){
        if (!<%= idColumn.Name.ToCamelCase() %>) { return callback('<%= idColumn.Name.ToCamelCase() %> required'); }
        if (<%= ValidatorMethod[idColumn.NativeType] %>(<%= idColumn.Name.ToCamelCase() %>)) { return callback('<%= idColumn.Name.ToCamelCase() %> invalid'); }

        if (confirm === true) {
            var client = request.newClient(_baseUri);
            client.post(REPO_BASE_PATH + 'killOne', data, function(err, res, body){
                if (err){ return callback(err.message); }
                if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

                return callback(null, body);
            });
        } else {
            callback('killOne operation not confirmed');
        }
    };

    var _killAll = function (confirm, callback){
        var data = { confirm: confirm };
        if (confirm === true) {
            var client = request.newClient(_baseUri);
            client.post(REPO_BASE_PATH + 'killAll', data, function(err, res, body){
                if (err){ return callback(err.message); }
                if (res.statusCode != 200){ return callback('<%= operationName %> failure'); }

                return callback(null, body);
            });
        } else {
            callback('killAll operation not confirmed');
        }
    };
<%    
    }

    // ============
    // KILL - END
    // ============

%>

    var ops = {
<%
    foreach (var operation in operations) 
    {
        var isLast = operation.Equals(operations[operations.Count - 1], StringComparison.OrdinalIgnoreCase);
%>
        _<%= operation %>: <%= operation %><% if (!isLast){ %>,<% } %>
<%
    }
%>
    };
    
    return ops;
};
    