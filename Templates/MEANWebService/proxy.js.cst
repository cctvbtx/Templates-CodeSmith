<%-- 
Name:   proxy.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JavaScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- 04. Options --%>
<%@ Property Name="APIRoutePrefix" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="BuildDate" Type="System.DateTime" Optional="True" %>

<%@ Map Name="DefaultsDelFlag" Src="Maps\DefaultsDelFlag.csmap" %>
<%@ Map Name="DtoFieldNames" Src="Maps\DtoFieldNames.csmap" %>
<%@ Map Name="SqlToMongoose" Src="Maps\SqlToMongoose.csmap" %>
<%@ Map Name="SqlToMongooseKey" Src="Maps\SqlToMongooseKey.csmap" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>
/*jslint node: true */
<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->

'use strict';

<%
var pkCount = 0;

var operations = new List<string>();








// ==============================================
// SCHEMA DEFINITION & INSTANCE VARIABLES - BEGIN
// ==============================================
%>
var CONFIG_PATH = '<%= (CurrentTable.HasDefaultOnwer() ? "" : "../") %>../../config';

var config = require(CONFIG_PATH),
    dates = require('dzutils').dates,
    request = require('request-json'),
    strings = require('dzutils').strings,
    uids = require('dzutils').uuids,
    util = require('util');
    
var BASE_URL = config.proxies.<%= ProjectName %>.url,
    URL_PATH = '<%= APIRoutePrefix %>/<%= CurrentTable.Name.ToHypehatedLowercase() %>';
<%










// ==================
// VALIDATION - BEGIN
// ==================

operations.Add("validateItem");
%>

var validateItem = function (item, callback) {
    if (!item) { return callback(new Error('No item to validate')); }
<% 
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }

    var text = "if (typeof item.{0} !== 'undefined') { if ({1}(item.{2})) { return callback(new Error('{3} is not a valid {4}')); }{5} }";
    text = text.Replace("{0}", column.Name.ToCamelCase());
    text = text.Replace("{2}", column.Name.ToCamelCase());
    if (column.Name.ToCamelCase().Equals(DtoFieldNames[column.Name.ToCamelCase()], StringComparison.Ordinal)){ text = text.Replace("{3}", column.Name.ToCamelCase()); }
    else { text = text.Replace("{3}", column.Name.ToCamelCase() + " (" + DtoFieldNames[column.Name.ToCamelCase()] + ")"); }

    text = text.Replace("{4}", ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType]) + (column.AllowDBNull ? " or null value" : string.Empty));
    var typeName = (column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType];
    switch (typeName)
    {
        case "String":
            if (column.IsPrimaryKeyMember || column.IsForeignKeyMember || column.NativeType.Equals("uniqueidentifier"))
            {
                if (column.IsFixedLength())
                {
                    text = text.Replace("{1}", "!strings.isAlphanumeric" + (column.AllowDBNull ? "OrNull" : string.Empty));
                }
                else
                {
                    text = text.Replace("{1}", "!uids.isIdentifier" + (column.AllowDBNull ? "OrNull" : string.Empty));
                }
            }
            else
            {
                text = text.Replace("{1}", "!strings.isValidString" + (column.AllowDBNull ? "OrNull" : string.Empty));
            }
            text = text.Replace("{5}", " else { strings.trimToNull(item." + column.Name.ToCamelCase() + "); }");
            break;
        case "Date":
        case "Number":
            text = text.Replace("{1}", "!" + typeName.ToLower() + "s.is" + SqlToMongoose[column.NativeType] + (column.AllowDBNull ? "OrNull" : string.Empty));
            text = text.Replace("{5}", string.Empty);
            break;
        case "Boolean":
            text = text.Replace("{1}", "!strings.is" + SqlToMongoose[column.NativeType] + (column.AllowDBNull ? "OrNull" : string.Empty));
            text = text.Replace("{5}", string.Empty);
            break;
        default:
            // validator = "TYPE NOT ACCOUNTED FOR";
            break;
    }
    // validator += column.AllowDBNull ? "OrNull" : string.Empty;
%>
    <%= text %>
<% 
}
%>
    return callback();
};
<%
// ==================
// VALIDATION - END
// ==================










// ==============
// TO DTO - BEGIN
// ==============

operations.Add("toDto");
operations.Add("toDtos");
operations.Add("toItem");
operations.Add("toItems");
%>

var toDto = function (item) {
    if (!item) { return null; }
    var dto = {};
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
%>
    if (typeof item.<%= column.Name.ToCamelCase() %> !== 'undefined') { dto.<%= DtoFieldNames[column.Name.ToCamelCase()] %> = item.<%= column.Name.ToCamelCase() %>; }
<%
}
%>    
    return dto;
};

var toDtos = function (items) {
    if (!items || items.length < 1) { return null; }
    var i, dtos = [];
    for (i = 0; i < items.length; i += 1) {
        dtos.push(toDto(items[i]));
    }
    return dtos;
};

var toDtoFull = function (item) {
    if (!item) { return null; }
    var dto = {
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == CurrentTable.Columns.Last()) ? string.Empty : ",";
%>
        <%= DtoFieldNames[column.Name.ToCamelCase()] %>: ((typeof item.<%= column.Name.ToCamelCase() %> !== 'undefined') ? item.<%= column.Name.ToCamelCase() %> : null)<%= eol %>
<%
};
%>    
    };
    return dto;
};

var toDtosFull = function (items) {
    if (!items || items.length < 1) { return null; }
    var i, dtos = [];
    for (i = 0; i < items.length; i += 1) {
        dtos.push(toDtoFull(items[i]));
    }
    return dtos;
};
<%
// ==============
// TO DTO - END
// ==============










// ===============
// TO ITEM - BEGIN
// ===============
%>

var toItem = function (dto) {
    if (!dto) { return null; }
    var item = {};
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
%>
    if (typeof dto.<%= DtoFieldNames[column.Name.ToCamelCase()] %> !== 'undefined') { item.<%= column.Name.ToCamelCase() %> = dto.<%= DtoFieldNames[column.Name.ToCamelCase()] %>; }
<%
}
%>    
    return item;
};

var toItems = function toItems(dtos) {
    if (!dtos || dtos.length < 1) { return null; }
    var i, items = [];
    for (i = 0; i < dtos.length; i += 1) {
        items.push(toItem(dtos[i]));
    }
    return items;
};

var toItemFull = function toItemFull(dto) {
    if (!dto) { return null; }
    var item = {
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == CurrentTable.Columns.Last()) ? string.Empty : ",";
%>
        <%= column.Name.ToCamelCase() %>: ((typeof dto.<%= DtoFieldNames[column.Name.ToCamelCase()] %> !== 'undefined') ? dto.<%= DtoFieldNames[column.Name.ToCamelCase()] %> : null)<%= eol %>
<%
}
%>    
    };
    return item;
};

var toItemsFull = function (dtos) {
    if (!dtos || dtos.length < 1) { return null; }
    var i, items = [];
    for (i = 0; i < dtos.length; i += 1) {
        items.push(toItemFull(dtos[i]));
    }
    return items;
};
<%
// ===============
// TO ITEM - END
// ===============









// =================
// GET BY ID - BEGIN
// =================

operations.Add("getAll");
operations.Add("getById");
operations.Add("getByIds");
%>

var getAll = function (callback) {
    var client = request.createClient(BASE_URL);
    client.get(URL_PATH, function (err, res, body) {
        if (err && res.statusCode === 404) { console.log("not found"); return callback(); }
        if (err) { return callback(err); }
        if (!body || !body.items || body.items.length < 1) { console.log("not returned"); return callback(); }
        return callback(null, toItems(body.items));
    });
};

var getById = function (id, callback) {
    if (!<%= CurrentTable.PrimaryKey.MemberColumns[0].IsFixedLength() ? "strings.isValidString" : "uids.isIdentifier" %>(id)) { return callback(new Error('Invalid id')); }
    var client = request.createClient(BASE_URL),
        url = URL_PATH + '/' + id;
    client.get(url, function (err, res, body) {
        if (err && res.statusCode === 404) { console.log("not found"); return callback(); }
        if (err) { return callback(err); }
        if (!body || !body.item) { console.log("not returned"); return callback(); }
        return callback(null, toItem(body.item));
    });
};

var getByIds = function (ids, callback) {
    if (!ids || !util.isArray(ids)) { return callback(new Error('No IDs supplied')); }
    var i;
    for (i = 0; i < ids.length; i += 1) {
        if (!<%= CurrentTable.PrimaryKey.MemberColumns[0].IsFixedLength() ? "strings.isValidString" : "uids.isIdentifier" %>(ids[i])) { return callback(new Error('Invalid ID detected')); }
    }
    var client = request.createClient(BASE_URL),
        data = { ids: ids },
        url = URL_PATH + '/get-by-ids';
    client.post(url, data, function (err, res, body) {
        if (err && res.statusCode === 404) { console.log("not found"); return callback(); }
        if (err) { return callback(err); }
        if (!body || !body.items) { console.log("not returned"); return callback(); }
        return callback(null, toItems(body.items));
    });
};
<%
// =================
// GET BY ID - END
// =================










// ====================
// GET BY INDEX - BEGIN
// ====================
if (CurrentTable.Indexes.Where(x => !x.IsPkIndex()).Count() < 1)
{
%>

// NO INDICES ON TABLE!
<%
}

foreach(var index in CurrentTable.Indexes.Where(x => !x.IsPkIndex()).OrderBy(x => x.IsUnique).OrderBy(x => x.CreateUniqueName()))
{
    var opName = "get" + (index.IsUnique ? "One" : "") + "By" + index.CreateUniqueName();
    operations.Add(opName);

    var columns = index.MemberColumns.Where(x => !x.IsAuditColumn());
%>

var get<%= (index.IsUnique ? "One" : "") %>By<%= index.CreateUniqueName() %> = function (<%= index.ToParamsArray() %>, callback) {
<%
    foreach (var column in columns.Where(x => !x.AllowDBNull))
    {
%>
    if (!<%= column.Name.ToCamelCase() %>) { return callback(new Error('<%= column.Name.ToCamelCase() %> is required but was not supplied')); }
<%
    }
%>
    var item = {
<%
    foreach (var column in columns)
    {
        var eol = (column == columns.Last()) ? string.Empty : ",";
%>
        <%= column.Name.ToCamelCase() %>: <%= (column.IsDeleteFlag() ? DefaultsDelFlag[column.NativeType] : column.Name.ToCamelCase()) %><%= eol %>
<%
    }
%>
    };
    validateItem(item, function (err) {
        if (err) { return callback(err); }
        var client = request.createClient(BASE_URL),
            url = URL_PATH + '/<%= opName.ToHypehatedLowercase() %>';
        client.post(url, toDto(item), function (err, res, body) {
            if (err && res.statusCode === 404) { console.log("not found"); return callback(); }
            if (err) { return callback(err); }
<%
    if (index.IsUnique)
    {
%>
            if (!body || !body.item) { console.log("not returned"); return callback(); }
            if (body && body.items && body.items.length > 1) { console.log("too many results returned"); return callback(); }
            return callback(null, toItem(body.item));
<%
    }
    else
    {
%>
            if (!body || !body.items || body.items.length < 1) { console.log("not returned"); return callback(); }
            return callback(null, toItems(body.items));
<%
    }
%>
        });
    });
<%
%>
};
<%
}
// ====================
// GET BY INDEX - END
// ====================










// ============
// INIT - BEGIN
// ============

var columnsForCreate = CurrentTable.Columns.Where(column => !column.IsVersionDateColumn() && !column.IsDeleteFlag())
                                            .Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection();

var paramArrayForCreate = columnsForCreate.ToParamsArray();

pkCount = 0;

operations.Add("createNewOrGet");
%>

var createNewOrGet = function (<%= paramArrayForCreate %>, callback) {
<%
    foreach (var column in columnsForCreate.Where(x => !x.AllowDBNull))
    {
%>
    if (!<%= column.Name.ToCamelCase() %>) { return callback(new Error('<%= column.Name.ToCamelCase() %> is required but was not supplied')); }
<%
    }
%>
    var item = {
<%
foreach (var column in columnsForCreate)
{
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == columnsForCreate.Last()) ? string.Empty : ",";

    var line = column.Name.ToCamelCase() + ": ";
    line += column.IsVersionDateColumn()
        ? "moment().utc().toDate()"
        : column.IsDeleteFlag()
            ? DefaultsDelFlag[column.NativeType]
            : column.Name.ToCamelCase();
    line += eol;
%>
        <%= line %>
<%
}
%>
    };
    validateItem(item, function (err) {
        if (err) { return callback(err); }
        var client = request.createClient(BASE_URL);
        client.post(URL_PATH, toDto(item), function (err, res, body) {
            if (err) { return callback(err); }
            var response = {
                id: (body && body.id ? body.id : null)
            };
            if (body && strings.notNullOrWhiteSpace(body.msg)) { response.msg = body.msg; }
            return callback(null, response);
        });
    });
};
<%
// ============
// INIT - END
// ============










// ==============
// MODIFY - BEGIN
// ==============

operations.Add("count");
operations.Add("countAll");
%>

var count = function (query, callback) {
    if (!query) { return callback(new Error('Query params required but not supplied')); }
    validateItem(query, function (err) {
        if (err) { return callback(new Error('Invalid query: ' + err.message)); }
        var client = request.createClient(BASE_URL),
            dto = {};
        dto.query = toDto(query);
        client.post(URL_PATH + '/count', dto, function (err, res, body) {
            if (err) { return callback(err); }
            if (typeof body.count === 'undefined') { return callback(new Error('Count not returned')); }
            return callback(null, body.count);
        });
    });
};

var countAll = function (<%= CurrentTable.HasDeleteFlag() ? "includeDeleted, " : "" %>callback) {
    var data = {<%= CurrentTable.HasDeleteFlag() ? " del: includeDeleted " : "" %>},
        client = request.createClient(BASE_URL);
    client.post(URL_PATH + '/count-all', dto, function (err, res, body) {
        if (err) { return callback(err); }
        if (typeof body.count === 'undefined') { return callback(new Error('Count not returned')); }
        return callback(null, body.count);
    });
};
<%
// ==============
// MODIFY - END
// ==============









// ==============
// MODIFY - BEGIN
// ==============

operations.Add("modifyMany");
operations.Add("modifyOne");
operations.Add("modifyById");
%>

var modifyMany = function (query, update<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!query) { return callback(new Error('Query params required but not supplied')); }
    if (!update) { return callback(new Error('Update params required by not supplied')); }
    var data = {<%= CurrentTable.HasVersionUserColumn() ? " " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + ": " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + " " : string.Empty %>};
    validateItem(data, function (err) {     // Validate any user value that may exist
        if (err) { return callback(err); }
        validateItem(query, function (err) {
            if (err) { return callback(new Error('Invalid query: ' + err.message)); }
            validateItem(update, function (err) {
                if (err) { return callback(new Error('Invalid update: ' + err.message)); }
                var client = request.createClient(BASE_URL),
                    dto = toDto(data);
                dto.query = toDto(query);
                dto.update = toDto(update);
                client.put(URL_PATH + '/many', dto, function (err, res, body) {
                    if (err) { return callback(err); }
                    return callback(null, body);
                });
            });
        });
    });
};

var modifyOne = function (query, update<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!query) { return callback(new Error('Query params required but not supplied')); }
    if (!update) { return callback(new Error('Update params required by not supplied')); }
    var data = {<%= CurrentTable.HasVersionUserColumn() ? " " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + ": " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + " " : string.Empty %>};
    validateItem(data, function (err) {     // Validate any user value that may exist
        if (err) { return callback(err); }
        validateItem(query, function (err) {
            if (err) { return callback(new Error('Invalid query: ' + err.message)); }
            validateItem(update, function (err) {
                if (err) { return callback(new Error('Invalid update: ' + err.message)); }
                var client = request.createClient(BASE_URL),
                    dto = toDto(data);
                dto.query = toDto(query);
                dto.update = toDto(update);
                client.put(URL_PATH, dto, function (err, res, body) {
                    if (err) { return callback(err); }
                    return callback(null, body);
                });
            });
        });
    });
};

var modifyById = function (id, update<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    return modifyOne({ id: id }, update<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback);
};
<%
// ==============
// MODIFY - END
// ==============










// ==============
// DELETE - BEGIN
// ==============
if (!CurrentTable.HasDeleteFlag())
{
%>

// TABLE DOES NOT HAVE A DELETE FLAG COLUMN - DELETE METHODS NOT GENERATED
<%
}
else
{
    operations.Add("deleteMany");
    operations.Add("deleteOne");
    operations.Add("deleteById");
%>

var deleteMany = function (query<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!query) { return callback(new Error('Query params required but not supplied')); }
    var data = {<%= CurrentTable.HasVersionUserColumn() ? " " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + ": " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + " " : string.Empty %>};
    validateItem(data, function (err) {     // Validate any user value that may exist
        if (err) { return callback(err); }
        validateItem(query, function (err) {
            if (err) { return callback(new Error('Invalid query: ' + err.message)); }
            validateItem(update, function (err) {
                if (err) { return callback(new Error('Invalid update: ' + err.message)); }
                var dto = toDto(data),
                    client = request.createClient(BASE_URL);
                dto.query = toDto(query);
                dto.update = toDto(update);
                client.delete(URL_PATH + '/many', dto, function (err, res, body) {
                    if (err) { return callback(err); }
                    return callback(null, body);
                });
            });
        });
    });
};

var deleteOne = function (query<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!query) { return callback(new Error('Query params required but not supplied')); }
    var data = {<%= CurrentTable.HasVersionUserColumn() ? " " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + ": " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase() + " " : string.Empty %>};
    validateItem(data, function (err) {     // Validate any user value that may exist
        if (err) { return callback(err); }
        validateItem(query, function (err) {
            if (err) { return callback(new Error('Invalid query: ' + err.message)); }
            validateItem(update, function (err) {
                if (err) { return callback(new Error('Invalid update: ' + err.message)); }
                var client = request.createClient(BASE_URL),
                    dto = toDto(data);
                dto.query = toDto(query);
                dto.update = toDto(update);
                client.delete(URL_PATH, dto, function (err, res, body) {
                    if (err) { return callback(err); }
                    return callback(null, body);
                });
            });
        });
    });
};

var deleteById = function (id<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    return deleteOne({ id: id }<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback);
};
<%
}
// ==============
// DELETE - END
// ==============
%>

module.exports = {
<%
foreach (var name in operations)
{
    var eol = (name == operations.Last() ? "" : ",");
%>
    <%= name %>: <%= name %><%= eol %>
<%
}
%>
};