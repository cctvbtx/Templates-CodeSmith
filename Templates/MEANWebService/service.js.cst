<%-- 
Name:   service.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JavaScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- 04. Options --%>
<%@ Property Name="APIRoutePrefix" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="BuildDate" Type="System.DateTime" Optional="True" %>

<%@ Map Name="DefaultsDelFlag" Src="Maps\DefaultsDelFlag.csmap" %>
<%@ Map Name="DtoFieldNames" Src="Maps\DtoFieldNames.csmap" %>
<%@ Map Name="SqlToMongoose" Src="Maps\SqlToMongoose.csmap" %>
<%@ Map Name="SqlToMongooseKey" Src="Maps\SqlToMongooseKey.csmap" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>
<%
var rootNav = CurrentTable.HasDefaultOnwer()
    ? "../../"
    : "../../../";

var siblingOwners = SourceDatabase.GetOwners().Where(x => !x.Equals(CurrentTable.Owner, StringComparison.OrdinalIgnoreCase)).ToList();
var siblingTables = SourceDatabase.Tables.Where(x => x.Owner.Equals(CurrentTable.Owner, StringComparison.OrdinalIgnoreCase) && 
                                                     !x.Name.Equals(CurrentTable.Name, StringComparison.OrdinalIgnoreCase)).ToList();
%>
/*jslint node: true */
<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->

'use strict';

// region Variables

var dz = require('dzutils'),
    config = require('<%= rootNav %>config'),
    proxy = require('<%= rootNav %>proxies/<%= ProjectName.ToHypehatedLowercase() %>');

<%
if (siblingOwners.Count() < 1) 
{
%>
// Sibling Namespaces (no others)
<%    
}
else
{
%>
// Sibling Namespaces (<%= siblingOwners.Count %> <%= siblingOwners.Count == 1 ? "other" : "others" %>)
<%
    foreach (var siblingOwner in siblingOwners)
    {
        var prefix = siblingOwner == siblingOwners.First() ? "var " : "    ";
        var suffix = siblingOwner == siblingOwners.Last() ? ";" : ",";
%>
<%= prefix %><%= siblingOwner.ToCamelCase() %> = require('../<%= siblingOwner.ToHypehatedLowercase() %>')<%= suffix %>
<%
    }
}
%>

<%
if (siblingTables.Count < 1) 
{
%>
// Sibling Repos (no others)
<%    
}
else
{
%>
// Sibling Repos (<%= siblingTables.Count %> <%= siblingTables.Count == 1 ? "other" : "others" %>)
<%
    foreach (var siblingTable in siblingTables)
    {
        var prefix = siblingTable == siblingTables.First() ? "var " : "    ";
        var suffix = siblingTable == siblingTables.Last() ? ";" : ",";
%>
<%= prefix %><%= siblingTable.Name.ToPlural().ToCamelCase() %> = require('./<%= siblingTable.Name.ToHypehatedLowercase() %>.service')<%= suffix %>
<%
    }
}
%>

// endregion

module.exports = {
    proxy: proxy<%= CurrentTable.HasDefaultOnwer() ? "" : "." + CurrentTable.Owner.ToCamelCase() %>.<%= CurrentTable.Name.ToPlural().ToCamelCase() %>
};