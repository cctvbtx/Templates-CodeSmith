<%-- 
Name:   Columns-ToJsondataWithValidation.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Description: Builds data JSON variable from a collection of columns while validating if they exist.

USAGE:
Include immediately after setting a local variable:

    columns (type ColumnSchemaCollection) : Collection of columns to recurse
    varMode (type FilterMode) : Indicates logic used when selecting columns.

EXCEPTIONS:
VersionDateColumn ... Only used during Create & data.  Will be set to default if found.
VersionUserColumn ... Only used during Create & data.  Will be set to default if found.
DeleteFlagColumn  ... Will be set depending on varMode variable.
--%>
        var data = {};
        var varCount = 0;

<%
foreach (var column in columns)
{
    if (column.IsPrimaryKeyMember){ continue; }
    if (column == idColumn){ continue; }
    
    if (column.IsVersionUserColumn())
    {
        switch(column.NativeType)
        {
            case "uniqueidentifier":
%>
        if (!<%= column.Name.ToCamelCase() %>){ return callback('<%= column.Name.ToCamelCase() %> required'); }
        if (!validator.isUUID(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
<%
                break;
            case "int":
            case "bigint":
%>
        if (!<%= column.Name.ToCamelCase() %>){ return callback('<%= column.Name.ToCamelCase() %> required'); }
        if (!strings.isNumbers(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
<%
                break;
            default:
%>
        INTENTIONAL ERROR 001 in Columns-ToJsondataWithValidation.cst - TYPE NOT EXPECTED: <%= column.NativeType %>
<%
                break;
        }
    }
    else if (column.AllowDBNull)
    {
        switch(column.NativeType)
        {
            case "uniqueidentifier":
%>
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) && !validator.isUUID(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %> && strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = null; varCount++; }
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) && validator.isUUID(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = <%= column.Name.ToCamelCase() %>; varCount++; }
<%
                break;
            case "int":
            case "bigint":
%>
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) && !strings.isNumbers(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %> && strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = null; varCount++; }
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = <%= column.Name.ToCamelCase() %>; varCount++; }
<%
                break;
            case "char":
            case "varchar":
            case "nchar":
            case "nvarchar":
%>
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = strings.trim(<%= column.Name.ToCamelCase() %>); varCount++; }
<%
                break;
            case "datetime":
%>
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) && !validator.isDate(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %> && strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = null; varCount++; }
        if (<%= column.Name.ToCamelCase() %> && !strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = Date.parse(<%= column.Name.ToCamelCase() %>); varCount++; }
<%
                break;
            default:
%>
        INTENTIONAL ERROR 002 in Columns-ToJsondataWithValidation.cst - TYPE NOT EXPECTED: <%= column.NativeType %>
<%
                break;
        }
    }
    else
    {
        switch(column.NativeType)
        {
            case "uniqueidentifier":
%>
        if (<%= column.Name.ToCamelCase() %> && (strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) || !validator.isUUID(<%= column.Name.ToCamelCase() %>))){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = <%= column.Name.ToCamelCase() %>; varCount++; }
<%
                break;
            case "int":
            case "bigint":
%>
        if (<%= column.Name.ToCamelCase() %> && (strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) || !strings.isNumbers(<%= column.Name.ToCamelCase() %>))){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = <%= column.Name.ToCamelCase() %>; varCount++; }
<%
                break;
            case "float":
%>
        if (<%= column.Name.ToCamelCase() %> && (strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) || !validator.isFloat(<%= column.Name.ToCamelCase() %>))){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = <%= column.Name.ToCamelCase() %>; varCount++; }
<%
                break;
            case "char":
            case "varchar":
            case "nchar":
            case "nvarchar":
%>
        if (<%= column.Name.ToCamelCase() %> && strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>)){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = strings.trim(<%= column.Name.ToCamelCase() %>); varCount++; }
<%
                break;
            case "datetime":
%>
        if (<%= column.Name.ToCamelCase() %> && (strings.isNullOrWhitespace(<%= column.Name.ToCamelCase() %>) || !validator.isDate(<%= column.Name.ToCamelCase() %>))){ return callback('<%= column.Name.ToCamelCase() %> is invalid'); }
        if (<%= column.Name.ToCamelCase() %>){ data.<%= FieldNameOverrides[column.Name.ToCamelCase()] %> = Date.parse(<%= column.Name.ToCamelCase() %>); varCount++; }
<%
                break;
            default:
%>
        INTENTIONAL ERROR 003 in Columns-ToJsondataWithValidation.cst - TYPE NOT EXPECTED: <%= column.NativeType %>
<%
                break;
        }
    }
}

%>

        if (varCount < 1){ return callback('Nothing to do.'); }
