<%-- 
Name:   authentication.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:   Utility file for handling strings in JavaScript projects.
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="OutputDirectory" Type="System.String" Optional="True" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Optional="True" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Optional="True" %>
<%@ Property Name="VersionText" Type="System.String" Optional="True" %>
<%@ Property Name="ProjectDescription" Type="System.String" Optional="True" %>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Optional="True" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="DevDbName" Type="System.String" Optional="True" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Optional="True" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Optional="True" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Optional="True" %>
<%@ Property Name="ProdDbName" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>
<!-- #include file="Includes\Header-JavaScript.cst" -->
var jwt = require('jwt-simple'),
    moment = require('moment');

var config = {}

function enforceAuthentication(req, res, next) {

    req.reqDate = new Date();
    req.vars = {};

    if (!req.headers || !req.headers.authorization) {
        return res.status(401).send({ message: 'User does not appear to be logged in.' });
    }

    var token = req.headers.authorization.split(' ')[1];
    var payload = jwt.decode(token, config.jwtSecret);

    if (payload.exp <= moment().unix()) {
        return res.status(401).send({ message: 'Session appears to have expired.' });
    }

    req.sessionId = payload.iss;
    req.userId = payload.sub;

    next();
}
function optionalAuthentication(req, res, next) {

    req.reqDate = new Date();
    req.vars = {};

    if (!req.headers || !req.headers.authorization) {
        req.sessionId = null;
        req.userId = null;
    } else {

        var token = req.headers.authorization.split(' ')[1];
        var payload = jwt.decode(token, config.jwtSecret);

        if (payload.exp <= moment().unix()) {
            return res.status(401).send({ message: 'Session appears to have expired.' });
        }

        req.sessionId = payload.iss;
        req.userId = payload.sub;
    }

    next();
}

function toToken (user, session) {

    var payload = {
        iss: session._id,
        sub: user._id,
        iat: moment(session.acd).unix(),
        exp: moment(session.expiryDate).unix()
    };

    return jwt.encode(payload, config.jwtSecret);
}

function toLoginResponse (user, session, accountList, jwtSecret) {

    accountList = accountList || [];

    var info = {
        email: user.email,
        accounts: [],
        token: toToken(user, session, jwtSecret)
    };

    for(var i = 0; i < accountList.length; i++){
        info.accounts.push({
            id: accountList[i]._id,
            name: accountList[i].formalName,
            type: accountList[i].typeCode,
            apps: accountList[i].apps
        });
    }

    return { user: info };
}

module.exports = function(config) {

    config = config;

    var util = {
        enforceAuthentication: enforceAuthentication,
        optionalAuthentication: optionalAuthentication,

        toToken: toToken,
        toLoginResponse: toLoginResponse
    }

    return util;

}