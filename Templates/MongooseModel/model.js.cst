<%-- 
Name:   model.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="Text" CompilerVersion="v4.5" Description="" %>

<%-- 02. Project --%>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>

<%@ Map Name="DefaultsDelFlag" Src="Maps\DefaultsDelFlag.csmap" %>
<%@ Map Name="SchemaFieldNames" Src="Maps\SchemaFieldNames.csmap" %>
<%@ Map Name="SqlToMongoose" Src="Maps\SqlToMongoose.csmap" %>
<%@ Map Name="SqlToMongooseKey" Src="Maps\SqlToMongooseKey.csmap" %>
<%@ Map Name="ValuesDelFlag" Src="Maps\ValuesDelFlag.csmap" %>
<%@ Map Name="ValuesVersionDate" Src="Maps\ValuesVersionDate.csmap" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->
<%
var pkCount = 0;









// ==============================================
// SCHEMA DEFINITION & INSTANCE VARIABLES - BEGIN
// ==============================================
%>
var moment = require('moment'),
    mongoose = require('mongoose'),
    strings = require('dzutils').strings,
    uids = require('dzutils').uuids;

var <%= CurrentTable.Name.ToCamelCase() %>Schema = new mongoose.Schema({
<% 
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }

    var eol = (column == CurrentTable.Columns.Last()) ? string.Empty : ",";
    var validator = string.Empty;
    var typeName = string.Empty;
    
    var line = SchemaFieldNames[column.Name.ToCamelCase()] + ": { type: " + ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType]);
    switch ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType])
    {
        case "String":
            validator = (column.IsPrimaryKeyMember || column.IsForeignKeyMember)
                ? (column.IsFixedLength() ? "strings.isAlphanumeric" : "uids.isIdentifier")
                : "strings.isValidString";
            validator += (column.AllowDBNull ? "OrNull" : string.Empty);
            
            typeName = (column.IsPrimaryKeyMember || column.IsForeignKeyMember)
                ? (column.IsFixedLength() ? "code" : "identifier")
                : "string";
            typeName += (column.AllowDBNull ? " or null value" : string.Empty);
            
            line += ", trim: true";
            line += (column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? ", uppercase: true" : string.Empty;
            line += (column.IsPrimaryKeyMember && !column.IsFixedLength()) ? ", default: uids.newIdentifier" : string.Empty;
            
            line += ", validate: [" + validator + ", '" + SchemaFieldNames[column.Name.ToCamelCase()] + " ";
            line += ((SchemaFieldNames[column.Name.ToCamelCase()] == column.Name.ToCamelCase()) ? "" : "(" + column.Name.ToCamelCase() + ") ");
            line += "is not a valid " + typeName + "']";
            break;
        case "Date":
            validator = "strings.isDate" + (column.AllowDBNull ? "OrNull" : string.Empty);
            typeName = "date" + (column.AllowDBNull ? " or null value" : string.Empty);
            
            line += column.IsDeleteFlag() ? ", default: null" : string.Empty;
            
            line += ", validate: [" + validator + ", '" + SchemaFieldNames[column.Name.ToCamelCase()] + " ";
            line += ((SchemaFieldNames[column.Name.ToCamelCase()] == column.Name.ToCamelCase()) ? "" : "(" + column.Name.ToCamelCase() + ") ");
            line += "is not a valid " + typeName + "']";
            break;
        case "Number":
            validator = (column.IsVersionDateColumn() || column.IsDeleteFlag())
                ? "strings.isUnixDateStamp"
                : "strings.isNumber";
            validator += (column.AllowDBNull ? "OrNull" : string.Empty);
            
            typeName = (column.IsVersionDateColumn() || column.IsDeleteFlag())
                ? "unix date stamp"
                : "number";
            typeName += (column.AllowDBNull ? " or null value" : string.Empty);
            
            // line += column.IsDeleteFlag() ? ", default: null" : string.Empty;
            
            line += ", validate: [" + validator + ", '" + SchemaFieldNames[column.Name.ToCamelCase()] + " ";
            line += ((SchemaFieldNames[column.Name.ToCamelCase()] == column.Name.ToCamelCase()) ? "" : "(" + column.Name.ToCamelCase() + ") ");
            line += "is not a valid " + typeName + "']";
            break;
        default:
            break;
    }
    line += ", required: " + column.AllowDBNull.ToString().ToLower();
    line += column.IsForeignKeyMember ? ", ref: '" + column.GetPrimaryTable().Name.ToPascalCase() + "'" : string.Empty;
    line += " }" + eol;
    
%>
    <%= line %>
<% 
}
%>
});
<%
// ==============================================
// SCHEMA DEFINITION & INSTANCE VARIABLES - END
// ==============================================










// ================
// INDICIES - BEGIN
// ================
if (CurrentTable.Indexes.Where(x => !x.IsPrimaryKey).Count() < 1)
{
%>

// TABLE DOES NOT HAVE ANY INDICIES!
<%
}

foreach(var index in CurrentTable.Indexes.Where(x => !x.IsPrimaryKey).OrderBy(x => x.IsUnique).OrderBy(x => x.CreateUniqueName()))
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.index({
<%
    foreach (var column in index.MemberColumns)
    {
        var eol = (column == index.MemberColumns.Last()) ? string.Empty : ",";
%>
    <%= SchemaFieldNames[column.Name.ToCamelCase()] %>: 1<%= eol %>
<%
    }
%>
}, { unique: <%= index.IsUnique.ToString().ToLower() %> });
<%
}
// ================
// INDICIES - END
// ================










// ==================
// VALIDATION - BEGIN
// ==================
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.validateItem = function validateItem(item, callback) {
    if (typeof item == 'undefined'){ return callback(new Error('No item to validate')); }
<% 
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }

    var text = "if (typeof item.{0} != 'undefined'){ if ({1}(item.{2})){ return callback(new Error('{3} is not a valid {4}')); } else { {5} } }";
    text = text.Replace("{0}", SchemaFieldNames[column.Name.ToCamelCase()]);
    text = text.Replace("{2}", SchemaFieldNames[column.Name.ToCamelCase()]);
    if (SchemaFieldNames[column.Name.ToCamelCase()].Equals(column.Name.ToCamelCase(), StringComparison.Ordinal)){ text = text.Replace("{3}", SchemaFieldNames[column.Name.ToCamelCase()]); }
    else { text = text.Replace("{3}", SchemaFieldNames[column.Name.ToCamelCase()] + " (" + column.Name.ToCamelCase() + ")"); }

    text = text.Replace("{4}", ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType]) + (column.AllowDBNull ? " or null value" : string.Empty));
    
    switch ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) ? SqlToMongooseKey[column.NativeType] : SqlToMongoose[column.NativeType])
    {
        case "String":
            if ((column.IsPrimaryKeyMember || column.IsForeignKeyMember) && column.IsFixedLength())
            {
                text = text.Replace("{1}", "!strings.isAlphanumeric" + (column.AllowDBNull ? "OrNull" : string.Empty));
            }
            else
            {
                text = text.Replace("{1}", "!strings.isValidString" + (column.AllowDBNull ? "OrNull" : string.Empty));
            }
            text = text.Replace("{5}", "item." + SchemaFieldNames[column.Name.ToCamelCase()] + " = strings.trimToNull(item." + SchemaFieldNames[column.Name.ToCamelCase()] + ");");
            break;
        case "Date":
        case "Number":
        case "Boolean":
            text = text.Replace("{1}", "!strings.is" + SqlToMongoose[column.NativeType] + (column.AllowDBNull ? "OrNull" : string.Empty));
            text = text.Replace("{5}", string.Empty);
            break;
        default:
            // validator = "TYPE NOT ACCOUNTED FOR";
            break;
    }
    // validator += column.AllowDBNull ? "OrNull" : string.Empty;
%>
    <%= text %>
<% 
}
%>
    return callback();
}
<%
// ==================
// VALIDATION - END
// ==================










// ==============
// TO DTO - BEGIN
// ==============
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toDto = function toDto(item) {
    if (!item){ return null; }
    var dto = {};
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
%>
    if (typeof item.<%= SchemaFieldNames[column.Name.ToCamelCase()] %> != 'undefined'){ dto.<%= column.Name.ToCamelCase() %> = item.<%= SchemaFieldNames[column.Name.ToCamelCase()] %>; }
<%
}
%>    
    return dto;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toDtos = function toDtos(items) {
    if (!items || !items.length < 1){ return null; }
    var dtos = [];
    for(var i = 0; i < items.length; i++)
    {
        dtos.push(this.toDto(items[i]));
    }
    return dtos;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toDtoFull = function toDtoFull(item) {
    if (!item){ return null; }
    var dto = {
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == CurrentTable.Columns.Last()) ? string.Empty : ",";
%>
        <%= column.Name.ToCamelCase() %>: ((typeof item.<%= SchemaFieldNames[column.Name.ToCamelCase()] %> != 'undefined') ? item.<%= SchemaFieldNames[column.Name.ToCamelCase()] %> : null)<%= eol %>
<%
}
%>    
    };
    return dto;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toDtosFull = function toDtosFull(items) {
    if (!items || !items.length < 1){ return null; }
    var dtos = [];
    for(var i = 0; i < items.length; i++)
    {
        dtos.push(this.toDtoFull(items[i]));
    }
    return dtos;
}
<%
// ==============
// TO DTO - END
// ==============










// ===============
// TO ITEM - BEGIN
// ===============
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toItem = function toItem(dto) {
    if (!dto){ return null; }
    var item = {};
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
%>
    if (typeof dto.<%= column.Name.ToCamelCase() %> != 'undefined'){ item.<%= SchemaFieldNames[column.Name.ToCamelCase()] %> = dto.<%= column.Name.ToCamelCase() %>; }
<%
}
%>    
    return item;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toItems = function toItems(dtos) {
    if (!dtos || !dtos.length < 1){ return null; }
    var items = [];
    for(var i = 0; i < dtos.length; i++)
    {
        items.push(this.toItem(dtos[i]));
    }
    return items;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toItemFull = function toItemFull(dto) {
    if (!dto){ return null; }
    var item = {
<%
pkCount = 0;
foreach (var column in CurrentTable.Columns)
{ 
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == CurrentTable.Columns.Last()) ? string.Empty : ",";
%>
        <%= SchemaFieldNames[column.Name.ToCamelCase()] %>: ((typeof dto.<%= column.Name.ToCamelCase() %> != 'undefined') ? dto.<%= column.Name.ToCamelCase() %> : null)<%= eol %>
<%
}
%>    
    };
    return item;
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.toItemsFull = function toItemsFull(dtos) {
    if (!dtos || !dtos.length < 1){ return null; }
    var items = [];
    for(var i = 0; i < dtos.length; i++)
    {
        items.push(this.toItemFull(dtos[i]));
    }
    return items;
}
<%
// ===============
// TO ITEM - END
// ===============









// =================
// GET BY ID - BEGIN
// =================
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.getAll = function getAll(callback) {
    var query = { <% if(CurrentTable.HasDeleteFlag()){ %><%= SchemaFieldNames[CurrentTable.GetDeleteFlagColumn().Name.ToCamelCase()] %>: <%= DefaultsDelFlag[CurrentTable.GetDeleteFlagColumn().NativeType] %><% } %> };
    return mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').find(query, function(err, items){
        if (err){ return callback(err); }
        return callback(null, this.toDtos(items));
    });
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.getById = function getById(id, callback) {
    var query = { _id: id<% if (CurrentTable.HasDeleteFlag()){ %>, <%= SchemaFieldNames[CurrentTable.GetDeleteFlagColumn().Name.ToCamelCase()] %>: <%= DefaultsDelFlag[CurrentTable.GetDeleteFlagColumn().NativeType] %><% } %> };
    this.validateItem(query, function(err){
        if (err){ return callback(err); }
        mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').findOne(query, function(err, item){
            if (err){ return callback(err); }
            return callback(null, this.toDto(item));
        });
    });
}
<%
// =================
// GET BY ID - END
// =================










// ====================
// GET BY INDEX - BEGIN
// ====================
if (CurrentTable.Indexes.Where(x => !x.IsPkIndex()).Count() < 1)
{
%>

// NO INDICES ON TABLE!
<%
}

foreach(var index in CurrentTable.Indexes.Where(x => !x.IsPkIndex()).OrderBy(x => x.IsUnique).OrderBy(x => x.CreateUniqueName()))
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.get<%= (index.IsUnique ? "One" : "") %>By<%= index.CreateUniqueName() %> = function get<%= (index.IsUnique ? "One" : "") %>By<%= index.CreateUniqueName() %>(<%= index.ToParamsArray() %>, callback) {
    var query = {
<%
    foreach (var column in index.MemberColumns)
    {
        var eol = (column == index.MemberColumns.Last()) ? string.Empty : ",";
%>
        <%= SchemaFieldNames[column.Name.ToCamelCase()] %>: <%= (column.IsDeleteFlag() ? DefaultsDelFlag[column.NativeType] : column.Name.ToCamelCase()) %><%= eol %>
<%
    }
%>
    };
    this.validateItem(query, function(err){
        if (err){ return callback(err); }
        mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').find<%= (index.IsUnique ? "One" : "") %>(query, function(err, <%= (index.IsUnique ? "item" : "items") %>){
            if (err){ return callback(err); }
            return callback(null, mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').<%= (index.IsUnique ? "toDto" : "toDtos") %>(<%= (index.IsUnique ? "item" : "items") %>));
        });
    });
<%
%>
}
<%
}
// ====================
// GET BY INDEX - END
// ====================










// ==============
// CREATE - BEGIN
// ==============


var paramArrayForCreate = CurrentTable.Columns.Where(column => !column.IsVersionDateColumn() && !column.IsDeleteFlag())
                                              .Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection().ToParamsArray();

var columnsForCreate = CurrentTable.Columns.Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection();

pkCount = 0;
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.createNew = function createNew(<%= paramArrayForCreate %>, callback) {
    var data = {
<%
foreach (var column in columnsForCreate)
{
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var eol = (column == columnsForCreate.Last()) ? string.Empty : ",";

    var line = SchemaFieldNames[column.Name.ToCamelCase()] + ": ";
    line += column.IsVersionDateColumn()
        ? "moment().utc().toDate()"
        : column.IsDeleteFlag()
            ? DefaultsDelFlag[column.NativeType]
            : column.Name.ToCamelCase();
    line += eol;
%>
        <%= line %>
<%
}
%>
    };
    this.validateItem(data, function(err){
        if (err){ return callback(err); }
        var newItem = new this(data);
        newItem.save(function(err, item){
            if (err){ return callback(err); }
            return callback(null, toDto(item));
        });
    });
}
<%
// ==============
// CREATE - END
// ==============










// ============
// INIT - BEGIN
// ============
pkCount = 0;
var indent = 0;
var PAD_WIDTH = 4;
var pad = string.Empty;
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.createOrGet = function createOrGet(<%= paramArrayForCreate %>, suppressError, callback) {
    var dupErr = suppressError ? null : (new Error('Duplicate <%= CurrentTable.Name.ToTitle() %> detected'));
<%
foreach (var index in CurrentTable.Indexes.Where(x => x.IsUnique && !x.IsPkIndex()))
{
    indent++;
    pad = string.Empty.PadLeft(PAD_WIDTH * indent, ' '); 
%>
<%= pad %>this.getOneBy<%= index.CreateUniqueName() %>(<%= index.ToParamsArray() %>, function(err, existing){
<%= pad %>    if (err){ return callback(err); }
<%= pad %>    if (existing){ return callback(dupErr, existing); }
<%
}
%>
<%= pad %>    this.createNew(<%= paramArrayForCreate %>, callback);
<%
for (int i = indent; i > 0; i--)
{
    pad = string.Empty.PadLeft(PAD_WIDTH * i, ' '); 
%>
<%= pad %>});
<%
}
%>
}
<%
// ============
// INIT - END
// ============










// ==============
// MODIFY - BEGIN
// ==============
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.modifyMany = function modifyMany(queryDto, updateDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!updateDto){   callback(new Error('Nothing to update')); }
<%
    if (CurrentTable.HasVersionDateColumn())
    {
%>
    updateDto.<%= CurrentTable.GetVersionDateColumn().Name.ToCamelCase() %> = <%= ValuesVersionDate[CurrentTable.GetVersionDateColumn().NativeType] %>;
<%
    }
    if (CurrentTable.HasVersionUserColumn())
    {
%>
    updateDto.<%= CurrentTable.GetVersionUserColumn().Name.ToCamelCase() %> = <%= CurrentTable.GetVersionUserColumn().Name.ToCamelCase() %>;
<%
    }
%>
    var query = toItem(queryDto);
    var update = toItem(updateDto);
    return mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').modify(query, update, callback);
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.modifyOne = function modifyOne(queryDto, updateDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    if (!updateDto){ return callback(new Error('Nothing to update')); }
<%
    if (CurrentTable.HasVersionDateColumn())
    {
%>
    updateDto.<%= CurrentTable.GetVersionDateColumn().Name.ToCamelCase() %> = <%= ValuesVersionDate[CurrentTable.GetVersionDateColumn().NativeType] %>;
<%
    }
    if (CurrentTable.HasVersionUserColumn())
    {
%>
    updateDto.<%= CurrentTable.GetVersionUserColumn().Name.ToCamelCase() %> = <%= CurrentTable.GetVersionUserColumn().Name.ToCamelCase() %>;
<%
    }
%>
    var query = toItem(queryDto);
    var update = toItem(updateDto);
    mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>').findOneAndUpdate(query, update, function(err, item){
        if (err){ return callback(err); }
        return callback(null, this.toDto(item));
    });
}
<%
// ==============
// MODIFY - END
// ==============










// ==============
// DELETE - BEGIN
// ==============
if (!CurrentTable.HasDeleteFlag())
{
%>

// TABLE DOES NOT HAVE A DELETE FLAG COLUMN - DELETE METHODS NOT GENERATED
<%
}
else
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.deleteMany = function deleteMany(queryDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    var updateDto = { <%= CurrentTable.GetDeleteFlagColumn().Name.ToCamelCase() %>: <%= ValuesDelFlag[CurrentTable.GetDeleteFlagColumn().NativeType] %> };
    return this.modifyMany(queryDto, updateDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback);
}

<%= CurrentTable.Name.ToCamelCase() %>Schema.methods.deleteOne = function deleteOne(queryDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback) {
    var updateDto = { <%= CurrentTable.GetDeleteFlagColumn().Name.ToCamelCase() %>: <%= ValuesDelFlag[CurrentTable.GetDeleteFlagColumn().NativeType] %> };
    return this.modifyOne(queryDto, updateDto<%= CurrentTable.HasVersionUserColumn() ? (", " + CurrentTable.GetVersionUserColumn().Name.ToCamelCase()) : string.Empty %>, callback);
}
<%
}
// ==============
// DELETE - END
// ==============
%>

var <%= CurrentTable.Name.ToCamelCase() %> = mongoose.model('<%= CurrentTable.Name.ToPascalCase() %>', <%= CurrentTable.Name.ToCamelCase() %>Schema);

module.exports = <%= CurrentTable.Name.ToCamelCase() %>;