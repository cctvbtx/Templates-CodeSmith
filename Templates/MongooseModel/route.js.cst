<%-- 
Name:   route.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="Text" CompilerVersion="v4.5" Description="" %>

<%-- 02. Project --%>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>
/*jslint node: true */
<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->

'use strict';

var express = require('express'),
    <%= CurrentTable.Name.ToPlural().ToPascalCase() %> = require('../../<%= CurrentTable.HasDefaultOnwer() ? "models/" : "../models/" + CurrentTable.Owner.ToHypehatedLowercase() + "/" %><%= CurrentTable.Name.ToHypehatedLowercase() %>.model');
    
var <%= CurrentTable.Name.ToCamelCase() %>Router = express.Router();
<%
var pkCount = 0;
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.get('/', function (req, res) {
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
    <%= CurrentTable.Name.ToCamelCase() %>Model.getAll(function (err, items) {
        if (err) { throw err; }
        if (!items || items.length < 1) { return res.status(404).send({}); }
        return res.send({ items: items });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.get('/:id', function (req, res) {
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
    <%= CurrentTable.Name.ToCamelCase() %>Model.getById(req.params.id, function (err, item) {
        if (err) { throw err; }
        if (!item) { return res.status(404).send({}); }
        return res.send({ item: item });
    });
});
<%
// ====================
// GET BY INDEX - BEGIN
// ====================
if (CurrentTable.Indexes.Where(x => !x.IsPkIndex()).Count() < 1)
{
%>

// NO INDICES ON TABLE!
<%
}

foreach(var index in CurrentTable.Indexes.Where(x => !x.IsPkIndex()).OrderBy(x => x.IsUnique).OrderBy(x => x.CreateUniqueName()))
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.post('/get-<%= (index.IsUnique ? "one-" : "") %>by-<%= index.CreateUniqueName().ToHypehatedLowercase() %>', function (req, res) {
<%
    foreach(var column in index.MemberColumns)
    {
        var prefix = (column == index.MemberColumns.First()) ? "var " : "    ";
%>
    <%= prefix %><%= column.Name.ToCamelCase() %> = req.body.<%= column.Name.ToCamelCase() %>,
<%
    }
%>
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
    <%= CurrentTable.Name.ToCamelCase() %>Model.get<%= (index.IsUnique ? "One" : "") %>By<%= index.CreateUniqueName() %>(<%= index.ToParamsArray() %>, function (err, <%= index.IsUnique ? "item" : "items" %>) {
        if (err) { throw err; }
        if (!item<%= index.IsUnique ? "" : "s || items.length < 1" %>) { return res.status(404).send({}); }
        return res.send({ <%= index.IsUnique ? "item: item" : "items: items" %> });
    });
});
<%
}
// ====================
// GET BY INDEX - END
// ====================










// ==============
// CREATE - BEGIN
// ==============

var paramArrayForCreate = CurrentTable.Columns.Where(column => !column.IsVersionDateColumn() && !column.IsDeleteFlag())
                                              .Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection().ToParamsArray();

var columnsForCreate = CurrentTable.Columns.Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection();

pkCount = 0;
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.post('/', function (req, res) {
<%
foreach (var column in columnsForCreate)
{
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
    
    var prefix = (column == columnsForCreate.First() ? "var " : "    ");
%>
    <%= prefix %><%= column.Name.ToCamelCase() %> = req.body.<%= column.Name.ToCamelCase() %>,
<%
}
%>
        suppressError = req.body.e,
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
    <%= CurrentTable.Name.ToCamelCase() %>Model.createNewOrGet(<%= paramArrayForCreate %>, suppressError, function (err, item) {
        if (err && !item) { throw err; }
        if (err && item) { return res.send({ msg: err.message, id: item.id }); }
        return res.send({ id: item.id });
    });
});
<%
// ==============
// CREATE - END
// ==============










// ==============
// MODIFY - BEGIN
// ==============
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.put('/many', function (req, res) {
    if (!req.body.query) { return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update) { return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>  
    <%= CurrentTable.Name.ToCamelCase() %>Model.modifyMany(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, numberAffected, rawResponse) {
        if (err) { throw err; }
        return res.send({ count: numberAffected, resp: rawResponse });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.put('/', function (req, res) {
    if (!req.body.query) { return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update) { return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>
    <%= CurrentTable.Name.ToCamelCase() %>Model.modifyOne(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, item) {
        if (err && !item) { throw err; }
        if (err && item) { return res.send({ msg: err.message, id: item.id }); }
        return res.send({ id: item.id });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.put('/:id', function (req, res) {
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var query = { id: req.params.id },
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var query = { id: req.params.id },
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>
    <%= CurrentTable.Name.ToCamelCase() %>Model.modifyOne(query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, item) {
        if (err && !item) { throw err; }
        if (err && item) { return res.send({ msg: err.message, item: item }); }
        return res.send({});
    });
});
<%
// ==============
// MODIFY - END
// ==============










// ==============
// DELETE - BEGIN
// ==============
if (!CurrentTable.HasDeleteFlag())
{
%>

// TABLE DOES NOT HAVE A DELETE FLAG COLUMN - DELETE METHOD NOT GENERATED
<%
}
else
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.del('/many', function (req, res) {
    if (!req.body.query) { return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update) { return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>  
    <%= CurrentTable.Name.ToCamelCase() %>Model.deleteMany(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, numberAffected, rawResponse) {
        if (err) { throw err; }
        return res.send({ count: numberAffected, resp: rawResponse });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.del('/', function (req, res) {
    if (!req.body.query) { return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update) { return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>
    <%= CurrentTable.Name.ToCamelCase() %>Model.deleteOne(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, item) {
        if (err && !item) { throw err; }
        if (err && item) { return res.send({ msg: err.message, id: item.id }); }
        return res.send({ id: item.id });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.del('/:id', function (req, res) {
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && !req.body.u) { return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var query = { id: req.params.id },
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>(),
        auditUserId = req.body.auditUserId || req.body.u;
<%
}
else 
{
%>
    var query = { id: req.params.id },
        <%= CurrentTable.Name.ToCamelCase() %>Model = new <%= CurrentTable.Name.ToPlural().ToPascalCase() %>();
<%
}
%>
    <%= CurrentTable.Name.ToCamelCase() %>Model.deleteOne(query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function (err, item) {
        if (err && !item) { throw err; }
        if (err && item) { return res.send({ msg: err.message, item: item }); }
        return res.send({});
    });
});
<%
}
// ==============
// DELETE - END
// ==============
%>

module.exports = <%= CurrentTable.Name.ToCamelCase() %>Router;