<%-- 
Name:   route.js.cst
Author: Fred Lackey <fred.lackey@gmail.com>
Desc:
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="JScript" OutputType="Text" CompilerVersion="v4.5" Description="" %>

<%-- 02. Project --%>
<%@ Property Name="AuthorName" Type="System.String" Optional="True" %>

<%-- Local Properties --%>
<%@ Property Name="CurrentTable" Type="TableSchema" Optional="True" %>
<%@ Property Name="FileName" Type="System.String" Optional="True" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="..\..\Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Languages.JavaScript" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<!-- #include file="..\Common\Includes\Header-JavaScript.cst" -->
var express = require('express'),
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %> = require('../../<%= CurrentTable.HasDefaultOnwer() ? "models/" : "../models/" + CurrentTable.Owner.ToHypehatedLowercase() + "/" %><%= CurrentTable.Name.ToHypehatedLowercase() %>.model');
    
var <%= CurrentTable.Name.ToCamelCase() %>Router = express.Router();
<%
var pkCount = 0;
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.get('/', function(req, res) {
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.getAll(function(err, items){
        if (err){ throw err; }
        if (!items || items.length < 1){ return res.status(404).send({}); }
        return res.send({ items: items });
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.get('/:id', function(req, res) {
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.getById(req.params.id, function(err, item){
        if (err){ throw err; }
        if (!item){ return res.status(404).send({}); }
        return res.send({ item: item });
    });
});
<%
// ====================
// GET BY INDEX - BEGIN
// ====================
if (CurrentTable.Indexes.Where(x => !x.IsPkIndex()).Count() < 1)
{
%>

// NO INDICES ON TABLE!
<%
}

foreach(var index in CurrentTable.Indexes.Where(x => !x.IsPkIndex()).OrderBy(x => x.IsUnique).OrderBy(x => x.CreateUniqueName()))
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.post('/get-<%= (index.IsUnique ? "one-" : "") %>by-<%= index.CreateUniqueName().ToHypehatedLowercase() %>', function(req, res) {
<%
    foreach(var column in index.MemberColumns)
    {
%>
    var <%= column.Name.ToCamelCase() %> = req.body.<%= column.Name.ToCamelCase() %>;
<%
    }
%>
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.get<%= (index.IsUnique ? "One" : "") %>By<%= index.CreateUniqueName() %>(<%= index.ToParamsArray() %>, function(err, <%= index.IsUnique ? "item" : "items" %>) {
        if (err){ throw err; }
        if (!item<%= index.IsUnique ? "" : "s || items.length < 1" %>){ return res.status(404).send({}); }
        return res.send({ <%= index.IsUnique ? "item: item" : "items: items" %> });
    });
});
<%
}
// ====================
// GET BY INDEX - END
// ====================










// ==============
// CREATE - BEGIN
// ==============

var paramArrayForCreate = CurrentTable.Columns.Where(column => !column.IsVersionDateColumn() && !column.IsDeleteFlag())
                                              .Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection().ToParamsArray();

var columnsForCreate = CurrentTable.Columns.Where(column => !column.IsPrimaryKeyMember || column.IsFixedLength()).ToList().ToColumnSchemaCollection();

pkCount = 0;
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.post('/', function(req, res) {
<%
foreach (var column in columnsForCreate)
{
    if (column.IsPrimaryKeyMember){ pkCount++; }
    if (column.IsPrimaryKeyMember && pkCount > 1){ continue; }
%>
    var <%= column.Name.ToCamelCase() %> = req.body.<%= column.Name.ToCamelCase() %>;
<%
}
%>
    var suppressError = req.body.suppressError;
    var model = new <%= CurrentTable.Name.ToPlural().ToCamelCase() %>();
    model.createOrGet(<%= paramArrayForCreate %>, suppressError, function(err, item) {
        if (err && !item){ throw err; }
        if (err && item){ return res.send({ msg: err.message, item: item }) }
        return res.send({ item: item })
    });
});
<%
// ==============
// CREATE - END
// ==============










// ==============
// MODIFY - BEGIN
// ==============
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.put('/', function(req, res) {
    if (!req.body.query){ return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update){ return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && req.body.u){ return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var auditUserId = (req.body.auditUserId ? req.body.auditUserId : req.body.u);
<%
}
%>    
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.modify(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function(err, items) {
        if (err && !items){ throw err; }
        if (err && items){ return res.send({ msg: err.message, items: items }) }
        return res.send({ items: items })
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.put('/:id', function(req, res) {
    var query = { id: req.params.id };
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && req.body.u){ return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var auditUserId = (req.body.auditUserId ? req.body.auditUserId : req.body.u);
<%
}
%>    
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.modifyOne(query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function(err, item) {
        if (err && !item){ throw err; }
        if (err && item){ return res.send({ msg: err.message, item: item }) }
        return res.send({ item: item })
    });
});
<%
// ==============
// MODIFY - END
// ==============










// ==============
// DELETE - BEGIN
// ==============
if (!CurrentTable.HasDeleteFlag())
{
%>

// TABLE DOES NOT HAVE A DELETE FLAG COLUMN - DELETE METHOD NOT GENERATED
<%
}
else
{
%>

<%= CurrentTable.Name.ToCamelCase() %>Router.delete('/', function(req, res) {
    if (!req.body.query){ return res.status(400).send({ msg: 'Query not supplied' }); }
    if (!req.body.update){ return res.status(400).send({ msg: 'Update not supplied' }); }
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && req.body.u){ return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var auditUserId = (req.body.auditUserId ? req.body.auditUserId : req.body.u);
<%
}
%>    
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.delete(req.body.query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function(err, items) {
        if (err && !items){ throw err; }
        if (err && items){ return res.send({ msg: err.message, items: items }) }
        return res.send({ items: items })
    });
});

<%= CurrentTable.Name.ToCamelCase() %>Router.delete('/:id', function(req, res) {
    var query = { id: req.params.id };
<%
if (CurrentTable.HasVersionUserColumn())
{
%>
    if (!req.body.auditUserId && req.body.u){ return res.status(400).send({ msg: 'Reuqesting user id not supplied' }); }
    var auditUserId = (req.body.auditUserId ? req.body.auditUserId : req.body.u);
<%
}
%>    
    <%= CurrentTable.Name.ToPlural().ToCamelCase() %>.deleteOne(query, req.body.update<%= (CurrentTable.HasVersionUserColumn() ? ", auditUserId" : "") %>, function(err, items) {
        if (err && !item){ throw err; }
        if (err && item){ return res.send({ msg: err.message, item: item }) }
        return res.send({ item: item })
    });
});
<%
}
// ==============
// DELETE - END
// ==============
%>

module.exports = <%= CurrentTable.Name.ToCamelCase() %>Router;