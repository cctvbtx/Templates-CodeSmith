<%-- 
CodeSmith SOA template
Author:  Fred Lackey <fred.lackey@gmail.com>
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="01. Setup" Description="" OnChanged="OnSetupChanged" %>
<%@ Property Category="01. Setup" Name="OutputDirectory" Default="C:\\_Generated"
    Type="System.String" Default="" Optional="False" 
    Description="The folder to save the generated files." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" OnChanged="OnSetupChanged" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Category="01. Setup" Description="Generated files are preserved in versioned folder beneath output directory." OnChanged="OnSetupChanged" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Category="02. Project" Optional="False" Default="MyMeanProject" Description="(Alpha, No spaces or extended) The short name of the web application.  Used in URLs and package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="VersionText" Type="System.String" Category="02. Project" Optional="False" Default="1.0.0" Description="(Numeric - ex: Major.Minor.Revision)  Version of generated application or database.  Used in package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="ProjectDescription" Type="System.String" Category="02. Project" Optional="True" Default="My MEAN project" Description="Formal name or a few words to describe the project.  Used in package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="AuthorName" Type="System.String" Category="02. Project" Optional="True" Description="Name and/or email address of author.  Used in package.json." OnChanged="OnSetupChanged" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<%-- ###########################################################################
     PER DATABASE TEMPLATES
     ########################################################################### --%>
<%@ Register Name="DataIndex" Template="Templates/MongooseModel/index.data.js.cst" %>
<%@ Register Name="RouteIndex" Template="Templates/MongooseModel/index.route.js.cst" %>

<%-- ###########################################################################
     PER TABLE TEMPLATES
     ########################################################################### --%>
<%@ Register Name="Model" Template="Templates/MongooseModel/model.js.cst" %>
<%@ Register Name="Route" Template="Templates/MongooseModel/route.js.cst" %>

<script runat="template">

    // ENTRY POINT
    // Controls setup of variables, directories, and calls subordinate templates.
    public override void Render(TextWriter writer)
    {
        var buildPath = OutputVersioning 
            ? Path.Combine(OutputDirectory, DateTime.Now.GetDateString("yyyyMMddhhmmss")) 
            : Path.Combine(OutputDirectory);
        
        if ( !renderPerDatabaseTemplates(buildPath) ){ return; }
        if ( !renderPerTableTemplates(buildPath) ){ return; }
    }
    
    private bool renderPerDatabaseTemplates(string buildPath)
    {
        var outputDir = Path.Combine(buildPath, "models");
        var file = default(OutputFile);
        var fileName = string.Empty;

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        var strategy = new PreserveRegionsMergeStrategy("^[ \\t]*[ \\s]*\"?(?i:Custom)\"?", "JavaScript");
        
        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        DataIndex _DataIndex = this.Create<DataIndex>();
        this.CopyPropertiesTo(_DataIndex);
        _DataIndex.FileName = fileName;
        _DataIndex.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "routes", "api");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        RouteIndex _RouteIndex = this.Create<RouteIndex>();
        this.CopyPropertiesTo(_RouteIndex);
        _RouteIndex.FileName = fileName;
        _RouteIndex.RenderToFile(file, true);
        
        return true;
    }

    private bool renderPerTableTemplates(string buildPath)
    {
        var outputDir = string.Empty;
        var file = default(OutputFile);
        var fileName = string.Empty;
        
        foreach ( TableSchema table in SourceDatabase.Tables )
        {
            outputDir = table.HasDefaultOnwer()
                ? Path.Combine(buildPath, "routes", "api")
                : Path.Combine(buildPath, "routes", "api", table.Owner.ToHypehatedLowercase());

            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = table.Name.ToHypehatedLowercase() + ".routes.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            Route _Route = this.Create<Route>();
            this.CopyPropertiesTo(_Route);
            _Route.FileName = fileName;
            _Route.CurrentTable = table;
            _Route.RenderToFile(file, true);
            
            outputDir = table.HasDefaultOnwer()
                ? Path.Combine(buildPath, "models")
                : Path.Combine(buildPath, "models", table.Owner.ToHypehatedLowercase());

            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = table.Name.ToHypehatedLowercase() + ".model.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            Model _Model = this.Create<Model>();
            this.CopyPropertiesTo(_Model);
            _Model.FileName = fileName;
            _Model.CurrentTable = table;
            _Model.RenderToFile(file, true);
        }

        return true;
    }
    
    private void OnSetupChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrWhiteSpace(AuthorName)){ AuthorName = Environment.UserName; }
    }
    
    public override IEnumerable<ValidationError> GetCustomValidationErrors() 
    {
        var errors = new List<ValidationError>();
        
        if (SourceDatabase == null){ errors.Add(new ValidationError("Database not selected")); }
        
        return errors;
    }
    
</script>
