<%-- 
MEAN Stack Web Service Template (without AngularJS)
Author:  Fred Lackey <fred.lackey@gmail.com>
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" OutputType="None" CompilerVersion="v4.5" Description="" %>

<%-- 01. Setup --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="01. Setup" Description="" OnChanged="OnSetupChanged" %>
<%@ Property Category="01. Setup" Name="OutputDirectory" Default="C:\\_Generated"
    Type="System.String" Default="" Optional="False" 
    Description="The folder to save the generated files." 
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" OnChanged="OnSetupChanged" %>
<%@ Property Name="OutputVersioning" Type="System.Boolean" Category="01. Setup" Description="Generated files are preserved in versioned folder beneath output directory." OnChanged="OnSetupChanged" %>

<%-- 02. Project --%>
<%@ Property Name="ProjectName" Type="System.String" Category="02. Project" Optional="False" Default="MyMeanProject" Description="(Alpha, No spaces or extended) The short name of the web application.  Used in URLs and package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="VersionText" Type="System.String" Category="02. Project" Optional="False" Default="1.0.0" Description="(Numeric - ex: Major.Minor.Revision)  Version of generated application or database.  Used in package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="ProjectDescription" Type="System.String" Category="02. Project" Optional="True" Default="My MEAN project" Description="Formal name or a few words to describe the project.  Used in package.json." OnChanged="OnSetupChanged" %>
<%@ Property Name="AuthorName" Type="System.String" Category="02. Project" Optional="True" Description="Name and/or email address of author.  Used in package.json." OnChanged="OnSetupChanged" %>

<%-- 03. Dev Config --%>
<%@ Property Name="DevHostName" Type="System.String" Category="03. Dev Config" Optional="False" Default="localhost" Description="FQDN of development (local) machine." OnChanged="OnSetupChanged" %>
<%@ Property Name="DevHostPort" Type="System.Int32" Category="03. Dev Config" Optional="False" Default="3030" Description="Port of development (local) server process." OnChanged="OnSetupChanged" %>
<%@ Property Name="DevDbFQDN" Type="System.String" Category="03. Dev Config" Optional="True" Default="localhost" Description="Name of the development MongoDB collection." OnChanged="OnSetupChanged" %>
<%@ Property Name="DevDbName" Type="System.String" Category="03. Dev Config" Optional="True" Default="" Description="FQDN of the development DB server." OnChanged="OnSetupChanged" %>

<%-- 03. Prod Config --%>
<%@ Property Name="ProdHostName" Type="System.String" Category="03. Prod Config" Optional="False" Default="localhost" Description="FQDN of production (local) machine." OnChanged="OnSetupChanged" %>
<%@ Property Name="ProdHostPort" Type="System.Int32" Category="03. Prod Config" Optional="False" Default="80" Description="Port of production (local) server process." OnChanged="OnSetupChanged" %>
<%@ Property Name="ProdDbFQDN" Type="System.String" Category="03. Prod Config" Optional="False" Default="dbuser:dbpass@ds123456.mongolab.com:12345" Description="Name of the production MongoDB collection." OnChanged="OnSetupChanged" %>
<%@ Property Name="ProdDbName" Type="System.String" Category="03. Prod Config" Optional="True" Default="" Description="FQDN of the production DB server." OnChanged="OnSetupChanged" %>

<%-- 04. Options --%>
<%@ Property Name="APIRoutePrefix" Type="System.String" Category="04. Options" Default="api" Description="URI prefix for direct web service routes" OnChanged="OnSetupChanged" %>

<%@ Assembly Name="SkydiverFL.Extensions.CodeSmith.dll" Path="Templates\Common" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.Core" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith" %>
<%@ Import Namespace="SkydiverFL.Extensions.CodeSmith.Helpers" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<%-- ###########################################################################
     PER DATABASE TEMPLATES
     ########################################################################### --%>
<%@ Register Name="App" Template="Templates/MongooseModel/app.js.cst" %>
<%@ Register Name="ErrorJade" Template="Templates/MongooseModel/error.jade.cst" %>
<%@ Register Name="IndexJade" Template="Templates/MongooseModel/index.jade.cst" %>
<%@ Register Name="LayoutJade" Template="Templates/MongooseModel/layout.jade.cst" %>
<%@ Register Name="WwwIndex" Template="Templates/MongooseModel/index.www.js.cst" %>

<%@ Register Name="Production" Template="Templates/MongooseModel/production.js.cst" %>
<%@ Register Name="Development" Template="Templates/MongooseModel/development.js.cst" %>

<%@ Register Name="ConfigIndex" Template="Templates/MongooseModel/index.config.js.cst" %>
<%@ Register Name="DataIndex" Template="Templates/MongooseModel/index.data.js.cst" %>
<%@ Register Name="RouteIndex" Template="Templates/MongooseModel/index.route.js.cst" %>
<%@ Register Name="Package" Template="Templates/MongooseModel/package.json.cst" %>
<%@ Register Name="Www" Template="Templates/MongooseModel/www.js.cst" %>

<%-- ###########################################################################
     PER OWNER TEMPLATES
     ########################################################################### --%>
<%@ Register Name="ProxyIndex" Template="Templates/MongooseModel/index.proxy.js.cst" %>

<%-- ###########################################################################
     PER TABLE TEMPLATES
     ########################################################################### --%>
<%@ Register Name="Model" Template="Templates/MongooseModel/model.js.cst" %>
<%@ Register Name="Proxy" Template="Templates/MongooseModel/proxy.js.cst" %>
<%@ Register Name="Route" Template="Templates/MongooseModel/route.js.cst" %>

<script runat="template">

    // ENTRY POINT
    // Controls setup of variables, directories, and calls subordinate templates.
    public override void Render(TextWriter writer)
    {
        var buildDate = DateTime.Now;
        var buildPath = OutputVersioning 
            ? Path.Combine(OutputDirectory, buildDate.GetDateString("yyyyMMddhhmmss"), ProjectName) 
            : Path.Combine(OutputDirectory, ProjectName);
        
        if ( !renderPerDatabaseTemplates(buildPath, buildDate) ){ return; }
        if ( !renderPerOwnerTemplates(buildPath, buildDate) ){ return; }
        if ( !renderPerTableTemplates(buildPath, buildDate) ){ return; }
    }
    
    private bool renderPerDatabaseTemplates(string buildPath, DateTime buildDate)
    {
        var strategy = new PreserveRegionsMergeStrategy("^[ \\t]*[ \\s]*\"?(?i:Custom)\"?", "JavaScript");

        var outputDir = Path.Combine(buildPath, "models");
        var file = default(OutputFile);
        var fileName = string.Empty;

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        DataIndex _DataIndex = this.Create<DataIndex>();
        this.CopyPropertiesTo(_DataIndex);
        _DataIndex.FileName = fileName;
        _DataIndex.BuildDate = buildDate;
        _DataIndex.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "config");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "development.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        Development _Development = this.Create<Development>();
        this.CopyPropertiesTo(_Development);
        _Development.FileName = fileName;
        _Development.BuildDate = buildDate;
        _Development.RenderToFile(file, true);

        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        ConfigIndex _ConfigIndex = this.Create<ConfigIndex>();
        this.CopyPropertiesTo(_ConfigIndex);
        _ConfigIndex.FileName = fileName;
        _ConfigIndex.BuildDate = buildDate;
        _ConfigIndex.RenderToFile(file, true);
        
        fileName = "production.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        Production _Production = this.Create<Production>();
        this.CopyPropertiesTo(_Production);
        _Production.FileName = fileName;
        _Production.BuildDate = buildDate;
        _Production.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "routes");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        WwwIndex _WwwIndex = this.Create<WwwIndex>();
        this.CopyPropertiesTo(_WwwIndex);
        _WwwIndex.FileName = fileName;
        _WwwIndex.BuildDate = buildDate;
        _WwwIndex.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "routes", "api");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "index.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        RouteIndex _RouteIndex = this.Create<RouteIndex>();
        this.CopyPropertiesTo(_RouteIndex);
        _RouteIndex.FileName = fileName;
        _RouteIndex.BuildDate = buildDate;
        _RouteIndex.RenderToFile(file, true);

        outputDir = buildPath;

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "app.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        App _App = this.Create<App>();
        this.CopyPropertiesTo(_App);
        _App.FileName = fileName;
        _App.BuildDate = buildDate;
        _App.RenderToFile(file, true);
        
        fileName = "package.json";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        Package _Package = this.Create<Package>();
        this.CopyPropertiesTo(_Package);
        _Package.FileName = fileName;
        _Package.BuildDate = buildDate;
        _Package.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "scripts");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "www.js";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        Www _Www = this.Create<Www>();
        this.CopyPropertiesTo(_Www);
        _Www.FileName = fileName;
        _Www.BuildDate = buildDate;
        _Www.RenderToFile(file, true);

        outputDir = Path.Combine(buildPath, "views");

        if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
        if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }
        
        fileName = "error.jade";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        ErrorJade _ErrorJade = this.Create<ErrorJade>();
        this.CopyPropertiesTo(_ErrorJade);
        _ErrorJade.FileName = fileName;
        _ErrorJade.BuildDate = buildDate;
        _ErrorJade.RenderToFile(file, true);
        
        fileName = "layout.jade";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        LayoutJade _LayoutJade = this.Create<LayoutJade>();
        this.CopyPropertiesTo(_LayoutJade);
        _LayoutJade.FileName = fileName;
        _LayoutJade.BuildDate = buildDate;
        _LayoutJade.RenderToFile(file, true);
        
        fileName = "index.jade";
        file = new OutputFile(Path.Combine(outputDir, fileName));
        IndexJade _IndexJade = this.Create<IndexJade>();
        this.CopyPropertiesTo(_IndexJade);
        _IndexJade.FileName = fileName;
        _IndexJade.BuildDate = buildDate;
        _IndexJade.RenderToFile(file, true);
        
        return true;
    }
    private bool renderPerOwnerTemplates(string buildPath, DateTime buildDate)
    {
        var outputDir = string.Empty;
        var file = default(OutputFile);
        var fileName = string.Empty;

        var owners = SourceDatabase.GetOwners(true).ToList();
        if (owners.FindIndex(x => x.Equals(SourceDatabase.GetDefaultOwner(), StringComparison.OrdinalIgnoreCase)) < 0)
        {
            owners.Add(SourceDatabase.GetDefaultOwner());
        }
        
        foreach ( var owner in owners )
        {
            outputDir = owner.Equals(SourceDatabase.GetDefaultOwner(), StringComparison.OrdinalIgnoreCase)
                ? Path.Combine(buildPath + ".Proxies")
                : Path.Combine(buildPath + ".Proxies", owner.ToHypehatedLowercase());
            
            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = "index.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            ProxyIndex _ProxyIndex = this.Create<ProxyIndex>();
            this.CopyPropertiesTo(_ProxyIndex);
            _ProxyIndex.FileName = fileName;
            _ProxyIndex.BuildDate = buildDate;
            _ProxyIndex.CurrentOwner = owner;
            _ProxyIndex.RenderToFile(file, true);
        }

        return true;
    }
    private bool renderPerTableTemplates(string buildPath, DateTime buildDate)
    {
        var outputDir = string.Empty;
        var file = default(OutputFile);
        var fileName = string.Empty;
        
        foreach ( TableSchema table in SourceDatabase.Tables )
        {
            outputDir = table.HasDefaultOnwer()
                ? Path.Combine(buildPath, "routes", "api")
                : Path.Combine(buildPath, "routes", "api", table.Owner.ToHypehatedLowercase());

            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = table.Name.ToHypehatedLowercase() + ".routes.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            Route _Route = this.Create<Route>();
            this.CopyPropertiesTo(_Route);
            _Route.FileName = fileName;
            _Route.BuildDate = buildDate;
            _Route.CurrentTable = table;
            _Route.RenderToFile(file, true);
            
            outputDir = table.HasDefaultOnwer()
                ? Path.Combine(buildPath + ".Proxies")
                : Path.Combine(buildPath + ".Proxies", table.Owner.ToHypehatedLowercase());

            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = table.Name.ToHypehatedLowercase() + ".proxy.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            Proxy _Proxy = this.Create<Proxy>();
            this.CopyPropertiesTo(_Proxy);
            _Proxy.FileName = fileName;
            _Proxy.BuildDate = buildDate;
            _Proxy.CurrentTable = table;
            _Proxy.RenderToFile(file, true);
            
            outputDir = table.HasDefaultOnwer()
                ? Path.Combine(buildPath, "models")
                : Path.Combine(buildPath, "models", table.Owner.ToHypehatedLowercase());

            if (!Directory.Exists(outputDir)){ Directory.CreateDirectory(outputDir); }
            if (!Directory.Exists(outputDir)){ this.Progress.Status = "Output directory not created."; return false; }

            fileName = table.Name.ToHypehatedLowercase() + ".model.js";
            file = new OutputFile(Path.Combine(outputDir, fileName));
            Model _Model = this.Create<Model>();
            this.CopyPropertiesTo(_Model);
            _Model.FileName = fileName;
            _Model.BuildDate = buildDate;
            _Model.CurrentTable = table;
            _Model.RenderToFile(file, true);
        }

        return true;
    }
    
    private void OnSetupChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrWhiteSpace(AuthorName)){ AuthorName = Environment.UserName; }
        
        var dbName = SourceDatabase == null ? string.Empty : SourceDatabase.Name.Clean(CommonStrings.Alphanumeric, false);
        if (string.IsNullOrEmpty(DevDbName) && !string.IsNullOrEmpty(dbName)){ DevDbName = dbName; }
        if (string.IsNullOrEmpty(ProdDbName) && !string.IsNullOrEmpty(dbName)){ ProdDbName = dbName; }
    }
    
    public override IEnumerable<ValidationError> GetCustomValidationErrors() 
    {
        var errors = new List<ValidationError>();
        
        if (SourceDatabase == null){ errors.Add(new ValidationError("Database not selected")); }
        
        return errors;
    }
    
</script>
